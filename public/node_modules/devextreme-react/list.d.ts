/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxList, { IOptions } from "devextreme/ui/list";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IListOptions extends IOptions, IHtmlOptions {
    groupRender?: (props: any) => React.ReactNode;
    groupComponent?: React.ComponentType<any>;
    groupKeyFn?: (data: any) => string;
    itemRender?: (props: any) => React.ReactNode;
    itemComponent?: React.ComponentType<any>;
    itemKeyFn?: (data: any) => string;
    defaultItems?: any;
    defaultSelectedItemKeys?: any;
    defaultSelectedItems?: any;
}
declare class List extends BaseComponent<IListOptions> {
    get instance(): dxList;
    protected _WidgetClass: typeof dxList;
    protected _defaults: {
        defaultItems: string;
        defaultSelectedItemKeys: string;
        defaultSelectedItems: string;
    };
    protected _expectedChildren: {
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
        itemDragging: {
            optionName: string;
            isCollectionItem: boolean;
        };
        menuItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        searchEditorOptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Button extends NestedOption<{
    location?: any;
    name?: any;
    options?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        options: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class CursorOffset extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
}
declare class Item extends NestedOption<{
    badge?: any;
    disabled?: any;
    html?: any;
    icon?: any;
    key?: any;
    showChevron?: any;
    template?: any;
    text?: any;
    visible?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class ItemDragging extends NestedOption<{
    allowDropInsideItem?: any;
    allowReordering?: any;
    autoScroll?: any;
    bindingOptions?: any;
    boundary?: any;
    container?: any;
    contentTemplate?: any;
    cursorOffset?: {
        x?: any;
        y?: any;
    };
    data?: any;
    dragDirection?: any;
    dragTemplate?: any;
    dropFeedbackMode?: any;
    elementAttr?: any;
    filter?: any;
    group?: any;
    handle?: any;
    height?: any;
    itemOrientation?: any;
    moveItemOnDrop?: any;
    onAdd?: any;
    onDisposing?: any;
    onDragChange?: any;
    onDragEnd?: any;
    onDragMove?: any;
    onDragStart?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    onPlaceholderPrepared?: any;
    onRemove?: any;
    onReorder?: any;
    rtlEnabled?: any;
    scrollSensitivity?: any;
    scrollSpeed?: any;
    width?: any;
    contentRender?: (props: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
    dragRender?: (props: any) => React.ReactNode;
    dragComponent?: React.ComponentType<any>;
    dragKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        cursorOffset: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class MenuItem extends NestedOption<{
    action?: any;
    text?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class Options extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    bindingOptions?: any;
    disabled?: any;
    elementAttr?: any;
    focusStateEnabled?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    icon?: any;
    onClick?: any;
    onContentReady?: any;
    onDisposing?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    rtlEnabled?: any;
    stylingMode?: any;
    tabIndex?: any;
    template?: any;
    text?: any;
    type?: any;
    useSubmitBehavior?: any;
    validationGroup?: any;
    visible?: any;
    width?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class SearchEditorOptions extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    bindingOptions?: any;
    buttons?: any;
    disabled?: any;
    elementAttr?: any;
    focusStateEnabled?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    inputAttr?: any;
    isValid?: any;
    mask?: any;
    maskChar?: any;
    maskInvalidMessage?: any;
    maskRules?: any;
    maxLength?: any;
    mode?: any;
    name?: any;
    onChange?: any;
    onContentReady?: any;
    onCopy?: any;
    onCut?: any;
    onDisposing?: any;
    onEnterKey?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onInitialized?: any;
    onInput?: any;
    onKeyDown?: any;
    onKeyPress?: any;
    onKeyUp?: any;
    onOptionChanged?: any;
    onPaste?: any;
    onValueChanged?: any;
    placeholder?: any;
    readOnly?: any;
    rtlEnabled?: any;
    showClearButton?: any;
    showMaskMode?: any;
    spellcheck?: any;
    stylingMode?: any;
    tabIndex?: any;
    text?: any;
    useMaskedValue?: any;
    validationError?: any;
    validationErrors?: any;
    validationMessageMode?: any;
    validationStatus?: any;
    value?: any;
    valueChangeEvent?: any;
    visible?: any;
    width?: any;
    defaultValue?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultValue: string;
    };
    static ExpectedChildren: {
        button: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
export default List;
export { List, IListOptions, Button, CursorOffset, Item, ItemDragging, MenuItem, Options, SearchEditorOptions };
