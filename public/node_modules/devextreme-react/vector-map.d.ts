/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxVectorMap, { IOptions } from "devextreme/viz/vector_map";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IVectorMapOptions extends IOptions, IHtmlOptions {
    defaultLoadingIndicator?: any;
}
declare class VectorMap extends BaseComponent<IVectorMapOptions> {
    get instance(): dxVectorMap;
    protected _WidgetClass: typeof dxVectorMap;
    protected _defaults: {
        defaultLoadingIndicator: string;
    };
    protected _expectedChildren: {
        background: {
            optionName: string;
            isCollectionItem: boolean;
        };
        controlBar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        layer: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legend: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadingIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
        projection: {
            optionName: string;
            isCollectionItem: boolean;
        };
        size: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        vectorMapTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Background extends NestedOption<{
    borderColor?: any;
    color?: any;
}> {
    static OptionName: string;
}
declare class Border extends NestedOption<{
    color?: any;
    cornerRadius?: any;
    dashStyle?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class ControlBar extends NestedOption<{
    borderColor?: any;
    color?: any;
    enabled?: any;
    horizontalAlignment?: any;
    margin?: any;
    opacity?: any;
    verticalAlignment?: any;
}> {
    static OptionName: string;
}
declare class Export extends NestedOption<{
    backgroundColor?: any;
    enabled?: any;
    fileName?: any;
    formats?: any;
    margin?: any;
    printingEnabled?: any;
    proxyUrl?: any;
    svgToCanvas?: any;
}> {
    static OptionName: string;
}
declare class Font extends NestedOption<{
    color?: any;
    family?: any;
    opacity?: any;
    size?: any;
    weight?: any;
}> {
    static OptionName: string;
}
declare class Format extends NestedOption<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class Label extends NestedOption<{
    dataField?: any;
    enabled?: any;
    font?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Layer extends NestedOption<{
    borderColor?: any;
    borderWidth?: any;
    color?: any;
    colorGroupingField?: any;
    colorGroups?: any;
    customize?: any;
    dataField?: any;
    dataSource?: any;
    elementType?: any;
    hoveredBorderColor?: any;
    hoveredBorderWidth?: any;
    hoveredColor?: any;
    hoverEnabled?: any;
    label?: {
        dataField?: any;
        enabled?: any;
        font?: any;
    };
    maxSize?: any;
    minSize?: any;
    name?: any;
    opacity?: any;
    palette?: any;
    paletteSize?: any;
    selectedBorderColor?: any;
    selectedBorderWidth?: any;
    selectedColor?: any;
    selectionMode?: any;
    size?: any;
    sizeGroupingField?: any;
    sizeGroups?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Legend extends NestedOption<{
    backgroundColor?: any;
    border?: {
        color?: any;
        cornerRadius?: any;
        dashStyle?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    columnCount?: any;
    columnItemSpacing?: any;
    customizeHint?: any;
    customizeItems?: any;
    customizeText?: any;
    font?: any;
    horizontalAlignment?: any;
    itemsAlignment?: any;
    itemTextPosition?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    markerColor?: any;
    markerShape?: any;
    markerSize?: any;
    markerTemplate?: any;
    orientation?: any;
    paddingLeftRight?: any;
    paddingTopBottom?: any;
    rowCount?: any;
    rowItemSpacing?: any;
    source?: {
        grouping?: any;
        layer?: any;
    };
    title?: {
        font?: any;
        horizontalAlignment?: any;
        margin?: {
            bottom?: any;
            left?: any;
            right?: any;
            top?: any;
        };
        placeholderSize?: any;
        subtitle?: {
            font?: any;
            offset?: any;
            text?: any;
        };
        text?: any;
        verticalAlignment?: any;
    };
    verticalAlignment?: any;
    visible?: any;
    markerRender?: (props: any) => React.ReactNode;
    markerComponent?: React.ComponentType<any>;
    markerKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        source: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class LegendBorder extends NestedOption<{
    color?: any;
    cornerRadius?: any;
    dashStyle?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class LegendTitle extends NestedOption<{
    font?: any;
    horizontalAlignment?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    placeholderSize?: any;
    subtitle?: {
        font?: any;
        offset?: any;
        text?: any;
    };
    text?: any;
    verticalAlignment?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendTitleSubtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class LegendTitleSubtitle extends NestedOption<{
    font?: any;
    offset?: any;
    text?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class LoadingIndicator extends NestedOption<{
    backgroundColor?: any;
    enabled?: any;
    font?: any;
    show?: any;
    text?: any;
    defaultShow?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultShow: string;
    };
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Margin extends NestedOption<{
    bottom?: any;
    left?: any;
    right?: any;
    top?: any;
}> {
    static OptionName: string;
}
declare class Projection extends NestedOption<{
    aspectRatio?: any;
    from?: any;
    to?: any;
}> {
    static OptionName: string;
}
declare class Shadow extends NestedOption<{
    blur?: any;
    color?: any;
    offsetX?: any;
    offsetY?: any;
    opacity?: any;
}> {
    static OptionName: string;
}
declare class Size extends NestedOption<{
    height?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Source extends NestedOption<{
    grouping?: any;
    layer?: any;
}> {
    static OptionName: string;
}
declare class Subtitle extends NestedOption<{
    font?: any;
    offset?: any;
    text?: any;
    textOverflow?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
}
declare class Title extends NestedOption<{
    font?: any;
    horizontalAlignment?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    placeholderSize?: any;
    subtitle?: {
        font?: any;
        offset?: any;
        text?: any;
    };
    text?: any;
    verticalAlignment?: any;
    textOverflow?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
}
declare class Tooltip extends NestedOption<{
    arrowLength?: any;
    border?: {
        color?: any;
        dashStyle?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    container?: any;
    contentTemplate?: any;
    cornerRadius?: any;
    customizeTooltip?: any;
    enabled?: any;
    font?: any;
    format?: any;
    opacity?: any;
    paddingLeftRight?: any;
    paddingTopBottom?: any;
    shadow?: {
        blur?: any;
        color?: any;
        offsetX?: any;
        offsetY?: any;
        opacity?: any;
    };
    zIndex?: any;
    contentRender?: (props: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltipBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class TooltipBorder extends NestedOption<{
    color?: any;
    dashStyle?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class VectorMapTitle extends NestedOption<{
    font?: any;
    horizontalAlignment?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    placeholderSize?: any;
    subtitle?: {
        font?: any;
        offset?: any;
        text?: any;
        textOverflow?: any;
        wordWrap?: any;
    };
    text?: any;
    textOverflow?: any;
    verticalAlignment?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        vectorMapTitleSubtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class VectorMapTitleSubtitle extends NestedOption<{
    font?: any;
    offset?: any;
    text?: any;
    textOverflow?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
export default VectorMap;
export { VectorMap, IVectorMapOptions, Background, Border, ControlBar, Export, Font, Format, Label, Layer, Legend, LegendBorder, LegendTitle, LegendTitleSubtitle, LoadingIndicator, Margin, Projection, Shadow, Size, Source, Subtitle, Title, Tooltip, TooltipBorder, VectorMapTitle, VectorMapTitleSubtitle };
