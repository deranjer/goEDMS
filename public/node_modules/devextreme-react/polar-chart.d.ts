/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxPolarChart, { IOptions } from "devextreme/viz/polar_chart";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IPolarChartOptions extends IOptions, IHtmlOptions {
    defaultLoadingIndicator?: any;
    defaultValueAxis?: any;
}
declare class PolarChart extends BaseComponent<IPolarChartOptions> {
    get instance(): dxPolarChart;
    protected _WidgetClass: typeof dxPolarChart;
    protected _defaults: {
        defaultLoadingIndicator: string;
        defaultValueAxis: string;
    };
    protected _expectedChildren: {
        adaptiveLayout: {
            optionName: string;
            isCollectionItem: boolean;
        };
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        argumentAxis: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAxisSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dataPrepareSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legend: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadingIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        polarChartTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        series: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesTemplate: {
            optionName: string;
            isCollectionItem: boolean;
        };
        size: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        valueAxis: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class AdaptiveLayout extends NestedOption<{
    height?: any;
    keepLabels?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Animation extends NestedOption<{
    duration?: any;
    easing?: any;
    enabled?: any;
    maxPointCountSupported?: any;
}> {
    static OptionName: string;
}
declare class ArgumentAxis extends NestedOption<{
    allowDecimals?: any;
    argumentType?: any;
    axisDivisionFactor?: any;
    categories?: any;
    color?: any;
    constantLines?: {
        color?: any;
        dashStyle?: any;
        displayBehindSeries?: any;
        extendAxis?: any;
        label?: {
            font?: any;
            text?: any;
            visible?: any;
        };
        value?: any;
        width?: any;
    };
    constantLineStyle?: {
        color?: any;
        dashStyle?: any;
        label?: {
            font?: any;
            visible?: any;
        };
        width?: any;
    };
    discreteAxisDivisionMode?: any;
    endOnTick?: any;
    firstPointOnStartAngle?: any;
    grid?: {
        color?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    hoverMode?: any;
    inverted?: any;
    label?: {
        customizeHint?: any;
        customizeText?: any;
        font?: any;
        format?: any;
        indentFromAxis?: any;
        overlappingBehavior?: any;
        visible?: any;
    };
    linearThreshold?: any;
    logarithmBase?: any;
    minorGrid?: {
        color?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    minorTick?: {
        color?: any;
        length?: any;
        opacity?: any;
        shift?: any;
        visible?: any;
        width?: any;
    };
    minorTickCount?: any;
    minorTickInterval?: {
        days?: any;
        hours?: any;
        milliseconds?: any;
        minutes?: any;
        months?: any;
        quarters?: any;
        seconds?: any;
        weeks?: any;
        years?: any;
    };
    opacity?: any;
    originValue?: any;
    period?: any;
    startAngle?: any;
    strips?: {
        color?: any;
        endValue?: any;
        label?: {
            font?: any;
            text?: any;
        };
        startValue?: any;
    };
    stripStyle?: {
        label?: {
            font?: any;
        };
    };
    tick?: {
        color?: any;
        length?: any;
        opacity?: any;
        shift?: any;
        visible?: any;
        width?: any;
    };
    tickInterval?: {
        days?: any;
        hours?: any;
        milliseconds?: any;
        minutes?: any;
        months?: any;
        quarters?: any;
        seconds?: any;
        weeks?: any;
        years?: any;
    };
    type?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        argumentAxisMinorTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        argumentAxisTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        axisLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLine: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLineStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        grid: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorGrid: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        strip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        stripStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ArgumentAxisMinorTick extends NestedOption<{
    color?: any;
    length?: any;
    opacity?: any;
    shift?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class ArgumentAxisTick extends NestedOption<{
    color?: any;
    length?: any;
    opacity?: any;
    shift?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class ArgumentFormat extends NestedOption<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class AxisLabel extends NestedOption<{
    customizeHint?: any;
    customizeText?: any;
    font?: any;
    format?: any;
    indentFromAxis?: any;
    overlappingBehavior?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class Border extends NestedOption<{
    color?: any;
    dashStyle?: any;
    visible?: any;
    width?: any;
    cornerRadius?: any;
    opacity?: any;
}> {
    static OptionName: string;
}
declare class CommonAxisSettings extends NestedOption<{
    allowDecimals?: any;
    color?: any;
    constantLineStyle?: {
        color?: any;
        dashStyle?: any;
        label?: {
            font?: any;
            visible?: any;
        };
        width?: any;
    };
    discreteAxisDivisionMode?: any;
    endOnTick?: any;
    grid?: {
        color?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    inverted?: any;
    label?: {
        font?: any;
        indentFromAxis?: any;
        overlappingBehavior?: any;
        visible?: any;
    };
    minorGrid?: {
        color?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    minorTick?: {
        color?: any;
        length?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    opacity?: any;
    stripStyle?: {
        label?: {
            font?: any;
        };
    };
    tick?: {
        color?: any;
        length?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        commonAxisSettingsLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAxisSettingsMinorTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAxisSettingsTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tick: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class CommonAxisSettingsLabel extends NestedOption<{
    font?: any;
    indentFromAxis?: any;
    overlappingBehavior?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class CommonAxisSettingsMinorTick extends NestedOption<{
    color?: any;
    length?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class CommonAxisSettingsTick extends NestedOption<{
    color?: any;
    length?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class CommonSeriesSettings extends NestedOption<{
    area?: any;
    argumentField?: any;
    axis?: any;
    bar?: any;
    barPadding?: any;
    barWidth?: any;
    border?: {
        color?: any;
        dashStyle?: any;
        visible?: any;
        width?: any;
    };
    closed?: any;
    color?: any;
    dashStyle?: any;
    hoverMode?: any;
    hoverStyle?: {
        border?: {
            color?: any;
            dashStyle?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        dashStyle?: any;
        hatching?: {
            direction?: any;
            opacity?: any;
            step?: any;
            width?: any;
        };
        width?: any;
    };
    ignoreEmptyPoints?: any;
    label?: {
        argumentFormat?: any;
        backgroundColor?: any;
        border?: {
            color?: any;
            dashStyle?: any;
            visible?: any;
            width?: any;
        };
        connector?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        customizeText?: any;
        font?: any;
        format?: any;
        position?: any;
        rotationAngle?: any;
        showForZeroValues?: any;
        visible?: any;
    };
    line?: any;
    maxLabelCount?: any;
    minBarSize?: any;
    opacity?: any;
    point?: {
        border?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        hoverMode?: any;
        hoverStyle?: {
            border?: {
                color?: any;
                visible?: any;
                width?: any;
            };
            color?: any;
            size?: any;
        };
        image?: {
            height?: any;
            url?: any;
            width?: any;
        };
        selectionMode?: any;
        selectionStyle?: {
            border?: {
                color?: any;
                visible?: any;
                width?: any;
            };
            color?: any;
            size?: any;
        };
        size?: any;
        symbol?: any;
        visible?: any;
    };
    scatter?: any;
    selectionMode?: any;
    selectionStyle?: {
        border?: {
            color?: any;
            dashStyle?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        dashStyle?: any;
        hatching?: {
            direction?: any;
            opacity?: any;
            step?: any;
            width?: any;
        };
        width?: any;
    };
    showInLegend?: any;
    stack?: any;
    stackedbar?: any;
    tagField?: any;
    type?: any;
    valueErrorBar?: {
        color?: any;
        displayMode?: any;
        edgeLength?: any;
        highValueField?: any;
        lineWidth?: any;
        lowValueField?: any;
        opacity?: any;
        type?: any;
        value?: any;
    };
    valueField?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettingsHoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettingsLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonSeriesSettingsSelectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        point: {
            optionName: string;
            isCollectionItem: boolean;
        };
        selectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        valueErrorBar: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class CommonSeriesSettingsHoverStyle extends NestedOption<{
    border?: {
        color?: any;
        dashStyle?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    dashStyle?: any;
    hatching?: {
        direction?: any;
        opacity?: any;
        step?: any;
        width?: any;
    };
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hatching: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class CommonSeriesSettingsLabel extends NestedOption<{
    argumentFormat?: any;
    backgroundColor?: any;
    border?: {
        color?: any;
        dashStyle?: any;
        visible?: any;
        width?: any;
    };
    connector?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    customizeText?: any;
    font?: any;
    format?: any;
    position?: any;
    rotationAngle?: any;
    showForZeroValues?: any;
    visible?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        argumentFormat: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        connector: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class CommonSeriesSettingsSelectionStyle extends NestedOption<{
    border?: {
        color?: any;
        dashStyle?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    dashStyle?: any;
    hatching?: {
        direction?: any;
        opacity?: any;
        step?: any;
        width?: any;
    };
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hatching: {
            optionName: string;
            isCollectionItem: boolean;
        };
        seriesBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Connector extends NestedOption<{
    color?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class ConstantLine extends NestedOption<{
    color?: any;
    dashStyle?: any;
    displayBehindSeries?: any;
    extendAxis?: any;
    label?: {
        font?: any;
        text?: any;
        visible?: any;
    };
    value?: any;
    width?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class ConstantLineLabel extends NestedOption<{
    font?: any;
    text?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class ConstantLineStyle extends NestedOption<{
    color?: any;
    dashStyle?: any;
    label?: {
        font?: any;
        visible?: any;
    };
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        constantLineStyleLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ConstantLineStyleLabel extends NestedOption<{
    font?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class DataPrepareSettings extends NestedOption<{
    checkTypeForAllData?: any;
    convertToAxisDataType?: any;
    sortingMethod?: any;
}> {
    static OptionName: string;
}
declare class Export extends NestedOption<{
    backgroundColor?: any;
    enabled?: any;
    fileName?: any;
    formats?: any;
    margin?: any;
    printingEnabled?: any;
    proxyUrl?: any;
    svgToCanvas?: any;
}> {
    static OptionName: string;
}
declare class Font extends NestedOption<{
    color?: any;
    family?: any;
    opacity?: any;
    size?: any;
    weight?: any;
}> {
    static OptionName: string;
}
declare class Format extends NestedOption<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class Grid extends NestedOption<{
    color?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Hatching extends NestedOption<{
    direction?: any;
    opacity?: any;
    step?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class HoverStyle extends NestedOption<{
    border?: {
        color?: any;
        dashStyle?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    dashStyle?: any;
    hatching?: {
        direction?: any;
        opacity?: any;
        step?: any;
        width?: any;
    };
    width?: any;
    size?: any;
}> {
    static OptionName: string;
}
declare class Image extends NestedOption<{
    height?: any;
    url?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Label extends NestedOption<{
    font?: any;
    text?: any;
    visible?: any;
    customizeHint?: any;
    customizeText?: any;
    format?: any;
    indentFromAxis?: any;
    overlappingBehavior?: any;
    argumentFormat?: any;
    backgroundColor?: any;
    border?: {
        color?: any;
        dashStyle?: any;
        visible?: any;
        width?: any;
    };
    connector?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    position?: any;
    rotationAngle?: any;
    showForZeroValues?: any;
}> {
    static OptionName: string;
}
declare class Legend extends NestedOption<{
    backgroundColor?: any;
    border?: {
        color?: any;
        cornerRadius?: any;
        dashStyle?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    columnCount?: any;
    columnItemSpacing?: any;
    customizeHint?: any;
    customizeItems?: any;
    customizeText?: any;
    font?: any;
    horizontalAlignment?: any;
    hoverMode?: any;
    itemsAlignment?: any;
    itemTextPosition?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    markerSize?: any;
    markerTemplate?: any;
    orientation?: any;
    paddingLeftRight?: any;
    paddingTopBottom?: any;
    rowCount?: any;
    rowItemSpacing?: any;
    title?: {
        font?: any;
        horizontalAlignment?: any;
        margin?: {
            bottom?: any;
            left?: any;
            right?: any;
            top?: any;
        };
        placeholderSize?: any;
        subtitle?: {
            font?: any;
            offset?: any;
            text?: any;
        };
        text?: any;
        verticalAlignment?: any;
    };
    verticalAlignment?: any;
    visible?: any;
    markerRender?: (props: any) => React.ReactNode;
    markerComponent?: React.ComponentType<any>;
    markerKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendTitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class LegendBorder extends NestedOption<{
    color?: any;
    cornerRadius?: any;
    dashStyle?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class LegendTitle extends NestedOption<{
    font?: any;
    horizontalAlignment?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    placeholderSize?: any;
    subtitle?: {
        font?: any;
        offset?: any;
        text?: any;
    };
    text?: any;
    verticalAlignment?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        legendTitleSubtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class LegendTitleSubtitle extends NestedOption<{
    font?: any;
    offset?: any;
    text?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Length extends NestedOption<{
    days?: any;
    hours?: any;
    milliseconds?: any;
    minutes?: any;
    months?: any;
    quarters?: any;
    seconds?: any;
    weeks?: any;
    years?: any;
}> {
    static OptionName: string;
}
declare class LoadingIndicator extends NestedOption<{
    backgroundColor?: any;
    enabled?: any;
    font?: any;
    show?: any;
    text?: any;
    defaultShow?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultShow: string;
    };
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Margin extends NestedOption<{
    bottom?: any;
    left?: any;
    right?: any;
    top?: any;
}> {
    static OptionName: string;
}
declare class MinorGrid extends NestedOption<{
    color?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class MinorTick extends NestedOption<{
    color?: any;
    length?: any;
    opacity?: any;
    shift?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class MinorTickInterval extends NestedOption<{
    days?: any;
    hours?: any;
    milliseconds?: any;
    minutes?: any;
    months?: any;
    quarters?: any;
    seconds?: any;
    weeks?: any;
    years?: any;
}> {
    static OptionName: string;
}
declare class MinVisualRangeLength extends NestedOption<{
    days?: any;
    hours?: any;
    milliseconds?: any;
    minutes?: any;
    months?: any;
    quarters?: any;
    seconds?: any;
    weeks?: any;
    years?: any;
}> {
    static OptionName: string;
}
declare class Point extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    hoverMode?: any;
    hoverStyle?: {
        border?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        size?: any;
    };
    image?: {
        height?: any;
        url?: any;
        width?: any;
    };
    selectionMode?: any;
    selectionStyle?: {
        border?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        size?: any;
    };
    size?: any;
    symbol?: any;
    visible?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        image: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointHoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointSelectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        selectionStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class PointBorder extends NestedOption<{
    color?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class PointHoverStyle extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    size?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class PointSelectionStyle extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    size?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pointBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class PolarChartTitle extends NestedOption<{
    font?: any;
    horizontalAlignment?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    placeholderSize?: any;
    subtitle?: {
        font?: any;
        offset?: any;
        text?: any;
        textOverflow?: any;
        wordWrap?: any;
    };
    text?: any;
    textOverflow?: any;
    verticalAlignment?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        polarChartTitleSubtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class PolarChartTitleSubtitle extends NestedOption<{
    font?: any;
    offset?: any;
    text?: any;
    textOverflow?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class SelectionStyle extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    size?: any;
    dashStyle?: any;
    hatching?: {
        direction?: any;
        opacity?: any;
        step?: any;
        width?: any;
    };
    width?: any;
}> {
    static OptionName: string;
}
declare class Series extends NestedOption<{
    argumentField?: any;
    axis?: any;
    barPadding?: any;
    barWidth?: any;
    border?: {
        color?: any;
        dashStyle?: any;
        visible?: any;
        width?: any;
    };
    closed?: any;
    color?: any;
    dashStyle?: any;
    hoverMode?: any;
    hoverStyle?: {
        border?: {
            color?: any;
            dashStyle?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        dashStyle?: any;
        hatching?: {
            direction?: any;
            opacity?: any;
            step?: any;
            width?: any;
        };
        width?: any;
    };
    ignoreEmptyPoints?: any;
    label?: {
        argumentFormat?: any;
        backgroundColor?: any;
        border?: {
            color?: any;
            dashStyle?: any;
            visible?: any;
            width?: any;
        };
        connector?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        customizeText?: any;
        font?: any;
        format?: any;
        position?: any;
        rotationAngle?: any;
        showForZeroValues?: any;
        visible?: any;
    };
    maxLabelCount?: any;
    minBarSize?: any;
    name?: any;
    opacity?: any;
    point?: {
        border?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        hoverMode?: any;
        hoverStyle?: {
            border?: {
                color?: any;
                visible?: any;
                width?: any;
            };
            color?: any;
            size?: any;
        };
        image?: {
            height?: any;
            url?: any;
            width?: any;
        };
        selectionMode?: any;
        selectionStyle?: {
            border?: {
                color?: any;
                visible?: any;
                width?: any;
            };
            color?: any;
            size?: any;
        };
        size?: any;
        symbol?: any;
        visible?: any;
    };
    selectionMode?: any;
    selectionStyle?: {
        border?: {
            color?: any;
            dashStyle?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        dashStyle?: any;
        hatching?: {
            direction?: any;
            opacity?: any;
            step?: any;
            width?: any;
        };
        width?: any;
    };
    showInLegend?: any;
    stack?: any;
    tag?: any;
    tagField?: any;
    type?: any;
    valueErrorBar?: {
        color?: any;
        displayMode?: any;
        edgeLength?: any;
        highValueField?: any;
        lineWidth?: any;
        lowValueField?: any;
        opacity?: any;
        type?: any;
        value?: any;
    };
    valueField?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class SeriesBorder extends NestedOption<{
    color?: any;
    dashStyle?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class SeriesTemplate extends NestedOption<{
    customizeSeries?: any;
    nameField?: any;
}> {
    static OptionName: string;
}
declare class Shadow extends NestedOption<{
    blur?: any;
    color?: any;
    offsetX?: any;
    offsetY?: any;
    opacity?: any;
}> {
    static OptionName: string;
}
declare class Size extends NestedOption<{
    height?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Strip extends NestedOption<{
    color?: any;
    endValue?: any;
    label?: {
        font?: any;
        text?: any;
    };
    startValue?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class StripLabel extends NestedOption<{
    font?: any;
    text?: any;
}> {
    static OptionName: string;
}
declare class StripStyle extends NestedOption<{
    label?: {
        font?: any;
    };
}> {
    static OptionName: string;
    static ExpectedChildren: {
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        stripStyleLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class StripStyleLabel extends NestedOption<{
    font?: any;
}> {
    static OptionName: string;
}
declare class Subtitle extends NestedOption<{
    font?: any;
    offset?: any;
    text?: any;
    textOverflow?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
}
declare class Tick extends NestedOption<{
    color?: any;
    length?: any;
    opacity?: any;
    shift?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class TickInterval extends NestedOption<{
    days?: any;
    hours?: any;
    milliseconds?: any;
    minutes?: any;
    months?: any;
    quarters?: any;
    seconds?: any;
    weeks?: any;
    years?: any;
}> {
    static OptionName: string;
}
declare class Title extends NestedOption<{
    font?: any;
    horizontalAlignment?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    placeholderSize?: any;
    subtitle?: {
        font?: any;
        offset?: any;
        text?: any;
    };
    text?: any;
    verticalAlignment?: any;
    textOverflow?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
}
declare class Tooltip extends NestedOption<{
    argumentFormat?: any;
    arrowLength?: any;
    border?: {
        color?: any;
        dashStyle?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    container?: any;
    contentTemplate?: any;
    cornerRadius?: any;
    customizeTooltip?: any;
    enabled?: any;
    font?: any;
    format?: any;
    opacity?: any;
    paddingLeftRight?: any;
    paddingTopBottom?: any;
    shadow?: {
        blur?: any;
        color?: any;
        offsetX?: any;
        offsetY?: any;
        opacity?: any;
    };
    shared?: any;
    zIndex?: any;
    contentRender?: (props: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        argumentFormat: {
            optionName: string;
            isCollectionItem: boolean;
        };
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltipBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class TooltipBorder extends NestedOption<{
    color?: any;
    dashStyle?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class ValueAxis extends NestedOption<{
    allowDecimals?: any;
    axisDivisionFactor?: any;
    categories?: any;
    color?: any;
    constantLines?: {
        color?: any;
        dashStyle?: any;
        displayBehindSeries?: any;
        extendAxis?: any;
        label?: {
            font?: any;
            text?: any;
            visible?: any;
        };
        value?: any;
        width?: any;
    };
    constantLineStyle?: {
        color?: any;
        dashStyle?: any;
        label?: {
            font?: any;
            visible?: any;
        };
        width?: any;
    };
    discreteAxisDivisionMode?: any;
    endOnTick?: any;
    grid?: {
        color?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    inverted?: any;
    label?: {
        customizeHint?: any;
        customizeText?: any;
        font?: any;
        format?: any;
        indentFromAxis?: any;
        overlappingBehavior?: any;
        visible?: any;
    };
    linearThreshold?: any;
    logarithmBase?: any;
    maxValueMargin?: any;
    minorGrid?: {
        color?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    minorTick?: {
        color?: any;
        length?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    minorTickCount?: any;
    minorTickInterval?: {
        days?: any;
        hours?: any;
        milliseconds?: any;
        minutes?: any;
        months?: any;
        quarters?: any;
        seconds?: any;
        weeks?: any;
        years?: any;
    };
    minValueMargin?: any;
    minVisualRangeLength?: {
        days?: any;
        hours?: any;
        milliseconds?: any;
        minutes?: any;
        months?: any;
        quarters?: any;
        seconds?: any;
        weeks?: any;
        years?: any;
    };
    opacity?: any;
    showZero?: any;
    strips?: {
        color?: any;
        endValue?: any;
        label?: {
            font?: any;
            text?: any;
        };
        startValue?: any;
    };
    stripStyle?: {
        label?: {
            font?: any;
        };
    };
    tick?: {
        color?: any;
        length?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    tickInterval?: {
        days?: any;
        hours?: any;
        milliseconds?: any;
        minutes?: any;
        months?: any;
        quarters?: any;
        seconds?: any;
        weeks?: any;
        years?: any;
    };
    type?: any;
    valueMarginsEnabled?: any;
    valueType?: any;
    visible?: any;
    visualRange?: any;
    visualRangeUpdateMode?: any;
    wholeRange?: any;
    width?: any;
    defaultVisualRange?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultVisualRange: string;
    };
    static ExpectedChildren: {
        axisLabel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        commonAxisSettingsTick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        constantLine: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minorTickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        minVisualRangeLength: {
            optionName: string;
            isCollectionItem: boolean;
        };
        strip: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tick: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tickInterval: {
            optionName: string;
            isCollectionItem: boolean;
        };
        visualRange: {
            optionName: string;
            isCollectionItem: boolean;
        };
        wholeRange: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ValueErrorBar extends NestedOption<{
    color?: any;
    displayMode?: any;
    edgeLength?: any;
    highValueField?: any;
    lineWidth?: any;
    lowValueField?: any;
    opacity?: any;
    type?: any;
    value?: any;
}> {
    static OptionName: string;
}
declare class VisualRange extends NestedOption<{
    endValue?: any;
    length?: {
        days?: any;
        hours?: any;
        milliseconds?: any;
        minutes?: any;
        months?: any;
        quarters?: any;
        seconds?: any;
        weeks?: any;
        years?: any;
    };
    startValue?: any;
    defaultEndValue?: any;
    defaultStartValue?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultEndValue: string;
        defaultStartValue: string;
    };
    static ExpectedChildren: {
        length: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class WholeRange extends NestedOption<{
    endValue?: any;
    length?: {
        days?: any;
        hours?: any;
        milliseconds?: any;
        minutes?: any;
        months?: any;
        quarters?: any;
        seconds?: any;
        weeks?: any;
        years?: any;
    };
    startValue?: any;
    defaultEndValue?: any;
    defaultStartValue?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultEndValue: string;
        defaultStartValue: string;
    };
}
export default PolarChart;
export { PolarChart, IPolarChartOptions, AdaptiveLayout, Animation, ArgumentAxis, ArgumentAxisMinorTick, ArgumentAxisTick, ArgumentFormat, AxisLabel, Border, CommonAxisSettings, CommonAxisSettingsLabel, CommonAxisSettingsMinorTick, CommonAxisSettingsTick, CommonSeriesSettings, CommonSeriesSettingsHoverStyle, CommonSeriesSettingsLabel, CommonSeriesSettingsSelectionStyle, Connector, ConstantLine, ConstantLineLabel, ConstantLineStyle, ConstantLineStyleLabel, DataPrepareSettings, Export, Font, Format, Grid, Hatching, HoverStyle, Image, Label, Legend, LegendBorder, LegendTitle, LegendTitleSubtitle, Length, LoadingIndicator, Margin, MinorGrid, MinorTick, MinorTickInterval, MinVisualRangeLength, Point, PointBorder, PointHoverStyle, PointSelectionStyle, PolarChartTitle, PolarChartTitleSubtitle, SelectionStyle, Series, SeriesBorder, SeriesTemplate, Shadow, Size, Strip, StripLabel, StripStyle, StripStyleLabel, Subtitle, Tick, TickInterval, Title, Tooltip, TooltipBorder, ValueAxis, ValueErrorBar, VisualRange, WholeRange };
