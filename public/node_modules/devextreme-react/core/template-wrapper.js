/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("devextreme/events");
var React = require("react");
var ReactDOM = require("react-dom");
var component_base_1 = require("./component-base");
var TemplateWrapper = /** @class */ (function (_super) {
    __extends(TemplateWrapper, _super);
    function TemplateWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this._removalListenerRef = React.createRef();
        return _this;
    }
    TemplateWrapper.prototype.render = function () {
        return ReactDOM.createPortal(React.createElement(React.Fragment, null, this.props.content, React.createElement(this.props.container.nodeName === "TABLE" ? "tbody" : "span", {
            style: { display: "none" },
            ref: this._removalListenerRef
        })), this.props.container);
    };
    TemplateWrapper.prototype.componentDidMount = function () {
        if (this.props.onRendered) {
            var onRendered_1 = this.props.onRendered;
            setTimeout(function () { return onRendered_1(); });
        }
        this._subscribeOnRemove();
    };
    TemplateWrapper.prototype.componentDidUpdate = function () {
        this._subscribeOnRemove();
    };
    TemplateWrapper.prototype.componentWillUnmount = function () {
        // Let React remove it itself
        var node = ReactDOM.findDOMNode(this);
        if (node) {
            this.props.container.appendChild(node);
        }
        this.props.container.appendChild(this._removalListenerRef.current);
    };
    TemplateWrapper.prototype._subscribeOnRemove = function () {
        var _this = this;
        var removalListener = this._removalListenerRef.current;
        if (!removalListener) {
            // T713245 (ref to removalListener is undefined under certain conditions)
            return;
        }
        events.one(removalListener, component_base_1.DX_REMOVE_EVENT, function () {
            _this.props.onRemoved();
        });
    };
    return TemplateWrapper;
}(React.PureComponent));
exports.TemplateWrapper = TemplateWrapper;
