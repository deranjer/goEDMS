/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var comparer_1 = require("./configuration/comparer");
var tree_1 = require("./configuration/tree");
var utils_1 = require("./configuration/utils");
var OptionsManager = /** @class */ (function () {
    function OptionsManager(templatesManager) {
        this._guards = {};
        this._isUpdating = false;
        this._templatesManager = templatesManager;
        this.onOptionChanged = this.onOptionChanged.bind(this);
        this._wrapOptionValue = this._wrapOptionValue.bind(this);
    }
    OptionsManager.prototype.setInstance = function (instance, config) {
        this._instance = instance;
        this._currentConfig = config;
    };
    OptionsManager.prototype.getInitialOptions = function (rootNode) {
        var config = tree_1.buildConfig(rootNode, false);
        for (var _i = 0, _a = Object.keys(config.templates); _i < _a.length; _i++) {
            var key = _a[_i];
            this._templatesManager.add(key, config.templates[key]);
        }
        var options = {};
        for (var _b = 0, _c = Object.keys(config.options); _b < _c.length; _b++) {
            var key = _c[_b];
            options[key] = this._wrapOptionValue(key, config.options[key]);
        }
        if (this._templatesManager.templatesCount > 0) {
            options.integrationOptions = {
                templates: this._templatesManager.templates
            };
        }
        return options;
    };
    OptionsManager.prototype.update = function (config) {
        var _this = this;
        var changes = comparer_1.getChanges(config, this._currentConfig);
        if (!changes.options && !changes.templates && !changes.removedOptions.length) {
            return;
        }
        this._instance.beginUpdate();
        this._isUpdating = true;
        changes.removedOptions.forEach(function (optionName) {
            _this._resetOption(optionName);
        });
        for (var _i = 0, _a = Object.keys(changes.templates); _i < _a.length; _i++) {
            var key = _a[_i];
            this._templatesManager.add(key, changes.templates[key]);
        }
        if (this._templatesManager.templatesCount > 0) {
            this._setValue("integrationOptions", {
                templates: this._templatesManager.templates
            });
        }
        for (var _b = 0, _c = Object.keys(changes.options); _b < _c.length; _b++) {
            var key = _c[_b];
            this._setValue(key, changes.options[key]);
        }
        this._isUpdating = false;
        this._instance.endUpdate();
        this._currentConfig = config;
    };
    OptionsManager.prototype.onOptionChanged = function (e) {
        if (this._isUpdating) {
            return;
        }
        var valueDescriptor = tree_1.findValue(this._currentConfig, e.fullName.split("."));
        if (!valueDescriptor) {
            return;
        }
        var value = valueDescriptor.value, type = valueDescriptor.type;
        if (type === tree_1.ValueType.Complex) {
            for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
                var key = _a[_i];
                if (value[key] === null ||
                    value[key] === undefined ||
                    value[key] === e.value[key]) {
                    continue;
                }
                this._setGuard(utils_1.mergeNameParts(e.fullName, key), value[key]);
            }
        }
        else {
            if (value === null ||
                value === undefined ||
                value === e.value) {
                return;
            }
            this._setGuard(e.fullName, value);
        }
    };
    OptionsManager.prototype.dispose = function () {
        for (var _i = 0, _a = Object.keys(this._guards); _i < _a.length; _i++) {
            var optionName = _a[_i];
            window.clearTimeout(this._guards[optionName]);
            delete this._guards[optionName];
        }
    };
    OptionsManager.prototype._wrapOptionValue = function (name, value) {
        var _this = this;
        if (name.substr(0, 2) === "on" && typeof value === "function") {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (!_this._isUpdating) {
                    value.apply(void 0, args);
                }
            };
        }
        return value;
    };
    OptionsManager.prototype._setGuard = function (optionName, optionValue) {
        var _this = this;
        if (this._guards[optionName] !== undefined) {
            return;
        }
        var guardId = window.setTimeout(function () {
            _this._setValue(optionName, optionValue);
            window.clearTimeout(guardId);
            delete _this._guards[optionName];
        });
        this._guards[optionName] = guardId;
    };
    OptionsManager.prototype._resetOption = function (name) {
        this._instance.resetOption(name);
    };
    OptionsManager.prototype._setValue = function (name, value) {
        if (this._guards[name]) {
            window.clearTimeout(this._guards[name]);
            delete this._guards[name];
        }
        this._instance.option(name, this._wrapOptionValue(name, value));
    };
    return OptionsManager;
}());
exports.OptionsManager = OptionsManager;
