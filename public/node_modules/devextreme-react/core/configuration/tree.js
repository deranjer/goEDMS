/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
function buildConfig(root, ignoreInitialValues) {
    var templatesAccum = {};
    var options = buildNode(root, templatesAccum, ignoreInitialValues);
    return {
        templates: templatesAccum,
        options: options
    };
}
exports.buildConfig = buildConfig;
function buildNode(node, templatesAccum, ignoreInitialValues) {
    var result = {};
    for (var _i = 0, _a = Object.keys(node.predefinedOptions); _i < _a.length; _i++) {
        var key = _a[_i];
        result[key] = node.predefinedOptions[key];
    }
    for (var _b = 0, _c = Object.keys(node.configs); _b < _c.length; _b++) {
        var key = _c[_b];
        result[key] = buildNode(node.configs[key], templatesAccum, ignoreInitialValues);
    }
    for (var _d = 0, _e = Object.keys(node.configCollections); _d < _e.length; _d++) {
        var key = _e[_d];
        result[key] = node.configCollections[key].map(function (item) { return buildNode(item, templatesAccum, ignoreInitialValues); });
    }
    if (!ignoreInitialValues) {
        for (var _f = 0, _g = Object.keys(node.initialOptions); _f < _g.length; _f++) {
            var key = _g[_f];
            result[key] = node.initialOptions[key];
        }
    }
    for (var _h = 0, _j = Object.keys(node.options); _h < _j.length; _h++) {
        var key = _j[_h];
        result[key] = node.options[key];
    }
    buildTemplates(node, result, templatesAccum);
    return result;
}
exports.buildNode = buildNode;
function buildTemplates(node, optionsAccum, templatesAccum) {
    node.templates.map(function (template) {
        if (template.isAnonymous) {
            var templateName = utils_1.mergeNameParts(node.fullName, template.optionName);
            optionsAccum[template.optionName] = templateName;
            templatesAccum[templateName] = template;
        }
        else {
            templatesAccum[template.optionName] = template;
        }
    });
}
exports.buildTemplates = buildTemplates;
var ValueType;
(function (ValueType) {
    ValueType[ValueType["Simple"] = 0] = "Simple";
    ValueType[ValueType["Complex"] = 1] = "Complex";
    ValueType[ValueType["Array"] = 2] = "Array";
})(ValueType || (ValueType = {}));
exports.ValueType = ValueType;
function findValue(node, path) {
    var name = path.shift();
    if (!name) {
        return {
            value: buildConfig(node, true).options,
            type: ValueType.Complex
        };
    }
    var optionInfo = utils_1.parseOptionName(name);
    if (optionInfo.isCollectionItem) {
        var collection = node.configCollections[optionInfo.name];
        if (!collection) {
            return;
        }
        var item = collection[optionInfo.index];
        if (!item) {
            return;
        }
        return findValue(item, path);
    }
    var child = node.configs[optionInfo.name];
    if (child) {
        return findValue(child, path);
    }
    var childCollection = node.configCollections[optionInfo.name];
    if (childCollection) {
        if (path.length !== 0) {
            return;
        }
        return {
            value: childCollection.map(function (item) { return buildNode(item, {}, true); }),
            type: ValueType.Array
        };
    }
    var value = node.options[optionInfo.name];
    if (value) {
        return findValueInObject(value, path);
    }
    return;
}
exports.findValue = findValue;
function findValueInObject(obj, path) {
    if (!obj) {
        return;
    }
    var key = path.shift();
    if (!key) {
        return {
            value: obj,
            type: ValueType.Simple
        };
    }
    return findValueInObject(obj[key], path);
}
