/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxForm, { IOptions } from "devextreme/ui/form";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IFormOptions extends IOptions, IHtmlOptions {
    defaultFormData?: any;
}
declare class Form extends BaseComponent<IFormOptions> {
    get instance(): dxForm;
    protected _WidgetClass: typeof dxForm;
    protected _defaults: {
        defaultFormData: string;
    };
    protected _expectedChildren: {
        ButtonItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        colCountByScreen: {
            optionName: string;
            isCollectionItem: boolean;
        };
        EmptyItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        GroupItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
        SimpleItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        TabbedItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class AsyncRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
    validationCallback?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class ButtonItem extends NestedOption<{
    alignment?: any;
    buttonOptions?: any;
    colSpan?: any;
    cssClass?: any;
    horizontalAlignment?: any;
    itemType?: any;
    name?: any;
    verticalAlignment?: any;
    visible?: any;
    visibleIndex?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        buttonOptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static PredefinedProps: {
        itemType: string;
    };
}
declare class ButtonOptions extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    bindingOptions?: any;
    disabled?: any;
    elementAttr?: any;
    focusStateEnabled?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    icon?: any;
    onClick?: any;
    onContentReady?: any;
    onDisposing?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    rtlEnabled?: any;
    stylingMode?: any;
    tabIndex?: any;
    template?: any;
    text?: any;
    type?: any;
    useSubmitBehavior?: any;
    validationGroup?: any;
    visible?: any;
    width?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class ColCountByScreen extends NestedOption<{
    lg?: any;
    md?: any;
    sm?: any;
    xs?: any;
}> {
    static OptionName: string;
}
declare class CompareRule extends NestedOption<{
    comparisonTarget?: any;
    comparisonType?: any;
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class CustomRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
    validationCallback?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class EmailRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class EmptyItem extends NestedOption<{
    colSpan?: any;
    cssClass?: any;
    itemType?: any;
    name?: any;
    visible?: any;
    visibleIndex?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        itemType: string;
    };
}
declare class GroupItem extends NestedOption<{
    alignItemLabels?: any;
    caption?: any;
    colCount?: any;
    colCountByScreen?: {
        lg?: any;
        md?: any;
        sm?: any;
        xs?: any;
    };
    colSpan?: any;
    cssClass?: any;
    items?: any;
    itemType?: any;
    name?: any;
    template?: any;
    visible?: any;
    visibleIndex?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        colCountByScreen: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
    static PredefinedProps: {
        itemType: string;
    };
}
declare class Item extends NestedOption<{
    badge?: any;
    disabled?: any;
    html?: any;
    icon?: any;
    tabTemplate?: any;
    template?: any;
    text?: any;
    title?: any;
    visible?: any;
    colSpan?: any;
    cssClass?: any;
    dataField?: any;
    editorOptions?: any;
    editorType?: any;
    helpText?: any;
    isRequired?: any;
    itemType?: any;
    label?: {
        alignment?: any;
        location?: any;
        showColon?: any;
        text?: any;
        visible?: any;
    };
    name?: any;
    validationRules?: any;
    visibleIndex?: any;
    alignItemLabels?: any;
    caption?: any;
    colCount?: any;
    colCountByScreen?: {
        lg?: any;
        md?: any;
        sm?: any;
        xs?: any;
    };
    items?: any;
    tabPanelOptions?: any;
    tabs?: {
        alignItemLabels?: any;
        badge?: any;
        colCount?: any;
        colCountByScreen?: {
            lg?: any;
            md?: any;
            sm?: any;
            xs?: any;
        };
        disabled?: any;
        icon?: any;
        items?: any;
        tabTemplate?: any;
        template?: any;
        title?: any;
    };
    alignment?: any;
    buttonOptions?: any;
    horizontalAlignment?: any;
    verticalAlignment?: any;
    tabRender?: (props: any) => React.ReactNode;
    tabComponent?: React.ComponentType<any>;
    tabKeyFn?: (data: any) => string;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Label extends NestedOption<{
    alignment?: any;
    location?: any;
    showColon?: any;
    text?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class NumericRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class PatternRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    pattern?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class RangeRule extends NestedOption<{
    ignoreEmptyValue?: any;
    max?: any;
    message?: any;
    min?: any;
    reevaluate?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class RequiredRule extends NestedOption<{
    message?: any;
    trim?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class SimpleItem extends NestedOption<{
    colSpan?: any;
    cssClass?: any;
    dataField?: any;
    editorOptions?: any;
    editorType?: any;
    helpText?: any;
    isRequired?: any;
    itemType?: any;
    label?: {
        alignment?: any;
        location?: any;
        showColon?: any;
        text?: any;
        visible?: any;
    };
    name?: any;
    template?: any;
    validationRules?: any;
    visible?: any;
    visibleIndex?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        AsyncRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CompareRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CustomRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        EmailRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        NumericRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        PatternRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RangeRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RequiredRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        StringLengthRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        validationRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
    static PredefinedProps: {
        itemType: string;
    };
}
declare class StringLengthRule extends NestedOption<{
    ignoreEmptyValue?: any;
    max?: any;
    message?: any;
    min?: any;
    trim?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Tab extends NestedOption<{
    alignItemLabels?: any;
    badge?: any;
    colCount?: any;
    colCountByScreen?: {
        lg?: any;
        md?: any;
        sm?: any;
        xs?: any;
    };
    disabled?: any;
    icon?: any;
    items?: any;
    tabTemplate?: any;
    template?: any;
    title?: any;
    tabRender?: (props: any) => React.ReactNode;
    tabComponent?: React.ComponentType<any>;
    tabKeyFn?: (data: any) => string;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        colCountByScreen: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class TabbedItem extends NestedOption<{
    colSpan?: any;
    cssClass?: any;
    itemType?: any;
    name?: any;
    tabPanelOptions?: any;
    tabs?: {
        alignItemLabels?: any;
        badge?: any;
        colCount?: any;
        colCountByScreen?: {
            lg?: any;
            md?: any;
            sm?: any;
            xs?: any;
        };
        disabled?: any;
        icon?: any;
        items?: any;
        tabTemplate?: any;
        template?: any;
        title?: any;
    };
    visible?: any;
    visibleIndex?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        tab: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tabPanelOptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static PredefinedProps: {
        itemType: string;
    };
}
declare class TabPanelOptions extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    animationEnabled?: any;
    bindingOptions?: any;
    dataSource?: any;
    deferRendering?: any;
    disabled?: any;
    elementAttr?: any;
    focusedElement?: any;
    focusStateEnabled?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    itemHoldTimeout?: any;
    items?: any;
    itemTemplate?: any;
    itemTitleTemplate?: any;
    keyExpr?: any;
    loop?: any;
    loopItemFocus?: any;
    noDataText?: any;
    onContentReady?: any;
    onDisposing?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onInitialized?: any;
    onItemClick?: any;
    onItemContextMenu?: any;
    onItemDeleted?: any;
    onItemDeleting?: any;
    onItemHold?: any;
    onItemRendered?: any;
    onItemReordered?: any;
    onOptionChanged?: any;
    onSelectionChanged?: any;
    onTitleClick?: any;
    onTitleHold?: any;
    onTitleRendered?: any;
    repaintChangesOnly?: any;
    rtlEnabled?: any;
    scrollByContent?: any;
    scrollingEnabled?: any;
    selectedIndex?: any;
    selectedItem?: any;
    selectedItemKeys?: any;
    selectedItems?: any;
    selectionByClick?: any;
    selectionMode?: any;
    selectionRequired?: any;
    selectOnFocus?: any;
    showNavButtons?: any;
    swipeEnabled?: any;
    tabIndex?: any;
    visible?: any;
    width?: any;
    defaultItems?: any;
    defaultSelectedIndex?: any;
    defaultSelectedItem?: any;
    defaultSelectedItemKeys?: any;
    defaultSelectedItems?: any;
    itemRender?: (props: any) => React.ReactNode;
    itemComponent?: React.ComponentType<any>;
    itemKeyFn?: (data: any) => string;
    itemTitleRender?: (props: any) => React.ReactNode;
    itemTitleComponent?: React.ComponentType<any>;
    itemTitleKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultItems: string;
        defaultSelectedIndex: string;
        defaultSelectedItem: string;
        defaultSelectedItemKeys: string;
        defaultSelectedItems: string;
    };
    static ExpectedChildren: {
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tabPanelOptionsItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class TabPanelOptionsItem extends NestedOption<{
    badge?: any;
    disabled?: any;
    html?: any;
    icon?: any;
    tabTemplate?: any;
    template?: any;
    text?: any;
    title?: any;
    visible?: any;
    tabRender?: (props: any) => React.ReactNode;
    tabComponent?: React.ComponentType<any>;
    tabKeyFn?: (data: any) => string;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class ValidationRule extends NestedOption<{
    message?: any;
    trim?: any;
    type?: any;
    ignoreEmptyValue?: any;
    max?: any;
    min?: any;
    reevaluate?: any;
    validationCallback?: any;
    comparisonTarget?: any;
    comparisonType?: any;
    pattern?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
export default Form;
export { Form, IFormOptions, AsyncRule, ButtonItem, ButtonOptions, ColCountByScreen, CompareRule, CustomRule, EmailRule, EmptyItem, GroupItem, Item, Label, NumericRule, PatternRule, RangeRule, RequiredRule, SimpleItem, StringLengthRule, Tab, TabbedItem, TabPanelOptions, TabPanelOptionsItem, ValidationRule };
