/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxSankey, { IOptions } from "devextreme/viz/sankey";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface ISankeyOptions extends IOptions, IHtmlOptions {
    defaultLoadingIndicator?: any;
}
declare class Sankey extends BaseComponent<ISankeyOptions> {
    get instance(): dxSankey;
    protected _WidgetClass: typeof dxSankey;
    protected _defaults: {
        defaultLoadingIndicator: string;
    };
    protected _expectedChildren: {
        adaptiveLayout: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        link: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadingIndicator: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        node: {
            optionName: string;
            isCollectionItem: boolean;
        };
        size: {
            optionName: string;
            isCollectionItem: boolean;
        };
        title: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class AdaptiveLayout extends NestedOption<{
    height?: any;
    keepLabels?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Border extends NestedOption<{
    color?: any;
    visible?: any;
    width?: any;
    dashStyle?: any;
    opacity?: any;
}> {
    static OptionName: string;
}
declare class Export extends NestedOption<{
    backgroundColor?: any;
    enabled?: any;
    fileName?: any;
    formats?: any;
    margin?: any;
    printingEnabled?: any;
    proxyUrl?: any;
    svgToCanvas?: any;
}> {
    static OptionName: string;
}
declare class Font extends NestedOption<{
    color?: any;
    family?: any;
    opacity?: any;
    size?: any;
    weight?: any;
}> {
    static OptionName: string;
}
declare class Format extends NestedOption<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class Hatching extends NestedOption<{
    direction?: any;
    opacity?: any;
    step?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class HoverStyle extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    hatching?: {
        direction?: any;
        opacity?: any;
        step?: any;
        width?: any;
    };
    opacity?: any;
}> {
    static OptionName: string;
}
declare class Label extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    customizeText?: any;
    font?: any;
    horizontalOffset?: any;
    overlappingBehavior?: any;
    shadow?: {
        blur?: any;
        color?: any;
        offsetX?: any;
        offsetY?: any;
        opacity?: any;
    };
    useNodeColors?: any;
    verticalOffset?: any;
    visible?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        sankeyborder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Link extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    colorMode?: any;
    hoverStyle?: {
        border?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        hatching?: {
            direction?: any;
            opacity?: any;
            step?: any;
            width?: any;
        };
        opacity?: any;
    };
    opacity?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        sankeyborder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class LoadingIndicator extends NestedOption<{
    backgroundColor?: any;
    enabled?: any;
    font?: any;
    show?: any;
    text?: any;
    defaultShow?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultShow: string;
    };
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Margin extends NestedOption<{
    bottom?: any;
    left?: any;
    right?: any;
    top?: any;
}> {
    static OptionName: string;
}
declare class Node extends NestedOption<{
    border?: {
        color?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    hoverStyle?: {
        border?: {
            color?: any;
            visible?: any;
            width?: any;
        };
        color?: any;
        hatching?: {
            direction?: any;
            opacity?: any;
            step?: any;
            width?: any;
        };
        opacity?: any;
    };
    opacity?: any;
    padding?: any;
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hoverStyle: {
            optionName: string;
            isCollectionItem: boolean;
        };
        sankeyborder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Sankeyborder extends NestedOption<{
    color?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Shadow extends NestedOption<{
    blur?: any;
    color?: any;
    offsetX?: any;
    offsetY?: any;
    opacity?: any;
}> {
    static OptionName: string;
}
declare class Size extends NestedOption<{
    height?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Subtitle extends NestedOption<{
    font?: any;
    offset?: any;
    text?: any;
    textOverflow?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Title extends NestedOption<{
    font?: any;
    horizontalAlignment?: any;
    margin?: {
        bottom?: any;
        left?: any;
        right?: any;
        top?: any;
    };
    placeholderSize?: any;
    subtitle?: {
        font?: any;
        offset?: any;
        text?: any;
        textOverflow?: any;
        wordWrap?: any;
    };
    text?: any;
    textOverflow?: any;
    verticalAlignment?: any;
    wordWrap?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        subtitle: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Tooltip extends NestedOption<{
    arrowLength?: any;
    border?: {
        color?: any;
        dashStyle?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    container?: any;
    cornerRadius?: any;
    customizeLinkTooltip?: any;
    customizeNodeTooltip?: any;
    enabled?: any;
    font?: any;
    format?: any;
    linkTooltipTemplate?: any;
    nodeTooltipTemplate?: any;
    opacity?: any;
    paddingLeftRight?: any;
    paddingTopBottom?: any;
    shadow?: {
        blur?: any;
        color?: any;
        offsetX?: any;
        offsetY?: any;
        opacity?: any;
    };
    zIndex?: any;
    linkTooltipRender?: (props: any) => React.ReactNode;
    linkTooltipComponent?: React.ComponentType<any>;
    linkTooltipKeyFn?: (data: any) => string;
    nodeTooltipRender?: (props: any) => React.ReactNode;
    nodeTooltipComponent?: React.ComponentType<any>;
    nodeTooltipKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltipBorder: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class TooltipBorder extends NestedOption<{
    color?: any;
    dashStyle?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
}
export default Sankey;
export { Sankey, ISankeyOptions, AdaptiveLayout, Border, Export, Font, Format, Hatching, HoverStyle, Label, Link, LoadingIndicator, Margin, Node, Sankeyborder, Shadow, Size, Subtitle, Title, Tooltip, TooltipBorder };
