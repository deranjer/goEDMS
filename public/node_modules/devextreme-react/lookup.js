/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lookup_1 = require("devextreme/ui/lookup");
var PropTypes = require("prop-types");
var component_1 = require("./core/component");
var nested_option_1 = require("./core/nested-option");
var Lookup = /** @class */ (function (_super) {
    __extends(Lookup, _super);
    function Lookup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = lookup_1.default;
        _this._defaults = {
            defaultOpened: "opened",
            defaultValue: "value"
        };
        _this._expectedChildren = {
            animation: { optionName: "animation", isCollectionItem: false },
            item: { optionName: "items", isCollectionItem: true },
            position: { optionName: "position", isCollectionItem: false }
        };
        _this._templateProps = [{
                tmplOption: "fieldTemplate",
                render: "fieldRender",
                component: "fieldComponent",
                keyFn: "fieldKeyFn"
            }, {
                tmplOption: "groupTemplate",
                render: "groupRender",
                component: "groupComponent",
                keyFn: "groupKeyFn"
            }, {
                tmplOption: "itemTemplate",
                render: "itemRender",
                component: "itemComponent",
                keyFn: "itemKeyFn"
            }, {
                tmplOption: "titleTemplate",
                render: "titleRender",
                component: "titleComponent",
                keyFn: "titleKeyFn"
            }];
        return _this;
    }
    Object.defineProperty(Lookup.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return Lookup;
}(component_1.Component));
exports.Lookup = Lookup;
Lookup.propTypes = {
    accessKey: PropTypes.string,
    activeStateEnabled: PropTypes.bool,
    animation: PropTypes.object,
    applyButtonText: PropTypes.string,
    applyValueMode: PropTypes.oneOf([
        "instantly",
        "useButtons"
    ]),
    cancelButtonText: PropTypes.string,
    cleanSearchOnOpening: PropTypes.bool,
    clearButtonText: PropTypes.string,
    closeOnOutsideClick: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.func
    ]),
    dataSource: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.object,
        PropTypes.string
    ]),
    deferRendering: PropTypes.bool,
    disabled: PropTypes.bool,
    displayExpr: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string
    ]),
    displayValue: PropTypes.string,
    elementAttr: PropTypes.object,
    focusStateEnabled: PropTypes.bool,
    fullScreen: PropTypes.bool,
    grouped: PropTypes.bool,
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    inputAttr: PropTypes.object,
    isValid: PropTypes.bool,
    items: PropTypes.array,
    minSearchLength: PropTypes.number,
    name: PropTypes.string,
    nextButtonText: PropTypes.string,
    noDataText: PropTypes.string,
    onClosed: PropTypes.func,
    onContentReady: PropTypes.func,
    onDisposing: PropTypes.func,
    onInitialized: PropTypes.func,
    onItemClick: PropTypes.func,
    onOpened: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onPageLoading: PropTypes.func,
    onPullRefresh: PropTypes.func,
    onScroll: PropTypes.func,
    onSelectionChanged: PropTypes.func,
    onTitleRendered: PropTypes.func,
    onValueChanged: PropTypes.func,
    opened: PropTypes.bool,
    pageLoadingText: PropTypes.string,
    pageLoadMode: PropTypes.oneOf([
        "nextButton",
        "scrollBottom"
    ]),
    placeholder: PropTypes.string,
    popupHeight: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    popupWidth: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    position: PropTypes.object,
    pulledDownText: PropTypes.string,
    pullingDownText: PropTypes.string,
    pullRefreshEnabled: PropTypes.bool,
    refreshingText: PropTypes.string,
    rtlEnabled: PropTypes.bool,
    searchEnabled: PropTypes.bool,
    searchExpr: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.func,
        PropTypes.string
    ]),
    searchMode: PropTypes.oneOf([
        "contains",
        "startswith"
    ]),
    searchPlaceholder: PropTypes.string,
    searchTimeout: PropTypes.number,
    shading: PropTypes.bool,
    showCancelButton: PropTypes.bool,
    showClearButton: PropTypes.bool,
    showDataBeforeSearch: PropTypes.bool,
    showPopupTitle: PropTypes.bool,
    stylingMode: PropTypes.oneOf([
        "outlined",
        "underlined",
        "filled"
    ]),
    tabIndex: PropTypes.number,
    text: PropTypes.string,
    title: PropTypes.string,
    useNativeScrolling: PropTypes.bool,
    usePopover: PropTypes.bool,
    validationError: PropTypes.object,
    validationErrors: PropTypes.array,
    validationMessageMode: PropTypes.oneOf([
        "always",
        "auto"
    ]),
    validationStatus: PropTypes.oneOf([
        "valid",
        "invalid",
        "pending"
    ]),
    valueChangeEvent: PropTypes.string,
    valueExpr: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.string
    ]),
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    wrapItemText: PropTypes.bool
};
// tslint:disable:max-classes-per-file
// owners:
// Lookup
var Animation = /** @class */ (function (_super) {
    __extends(Animation, _super);
    function Animation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Animation.OptionName = "animation";
    Animation.ExpectedChildren = {
        hide: { optionName: "hide", isCollectionItem: false },
        show: { optionName: "show", isCollectionItem: false }
    };
    return Animation;
}(nested_option_1.default));
exports.Animation = Animation;
// owners:
// Position
var At = /** @class */ (function (_super) {
    __extends(At, _super);
    function At() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    At.OptionName = "at";
    return At;
}(nested_option_1.default));
exports.At = At;
// owners:
// Position
var BoundaryOffset = /** @class */ (function (_super) {
    __extends(BoundaryOffset, _super);
    function BoundaryOffset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BoundaryOffset.OptionName = "boundaryOffset";
    return BoundaryOffset;
}(nested_option_1.default));
exports.BoundaryOffset = BoundaryOffset;
// owners:
// Position
var Collision = /** @class */ (function (_super) {
    __extends(Collision, _super);
    function Collision() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Collision.OptionName = "collision";
    return Collision;
}(nested_option_1.default));
exports.Collision = Collision;
// owners:
// Animation
var Hide = /** @class */ (function (_super) {
    __extends(Hide, _super);
    function Hide() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hide.OptionName = "hide";
    return Hide;
}(nested_option_1.default));
exports.Hide = Hide;
// owners:
// Lookup
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.OptionName = "items";
    Item.IsCollectionItem = true;
    Item.TemplateProps = [{
            tmplOption: "template",
            render: "render",
            component: "component",
            keyFn: "keyFn"
        }];
    return Item;
}(nested_option_1.default));
exports.Item = Item;
// owners:
// Position
var My = /** @class */ (function (_super) {
    __extends(My, _super);
    function My() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    My.OptionName = "my";
    return My;
}(nested_option_1.default));
exports.My = My;
// owners:
// Position
var Offset = /** @class */ (function (_super) {
    __extends(Offset, _super);
    function Offset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Offset.OptionName = "offset";
    return Offset;
}(nested_option_1.default));
exports.Offset = Offset;
// owners:
// Lookup
var Position = /** @class */ (function (_super) {
    __extends(Position, _super);
    function Position() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Position.OptionName = "position";
    Position.ExpectedChildren = {
        at: { optionName: "at", isCollectionItem: false },
        boundaryOffset: { optionName: "boundaryOffset", isCollectionItem: false },
        collision: { optionName: "collision", isCollectionItem: false },
        my: { optionName: "my", isCollectionItem: false },
        offset: { optionName: "offset", isCollectionItem: false }
    };
    return Position;
}(nested_option_1.default));
exports.Position = Position;
// owners:
// Animation
var Show = /** @class */ (function (_super) {
    __extends(Show, _super);
    function Show() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Show.OptionName = "show";
    return Show;
}(nested_option_1.default));
exports.Show = Show;
exports.default = Lookup;
