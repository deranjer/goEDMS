/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var diagram_1 = require("devextreme/ui/diagram");
var PropTypes = require("prop-types");
var component_1 = require("./core/component");
var nested_option_1 = require("./core/nested-option");
var Diagram = /** @class */ (function (_super) {
    __extends(Diagram, _super);
    function Diagram() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WidgetClass = diagram_1.default;
        _this._expectedChildren = {
            contextMenu: { optionName: "contextMenu", isCollectionItem: false },
            customShape: { optionName: "customShapes", isCollectionItem: true },
            edges: { optionName: "edges", isCollectionItem: false },
            export: { optionName: "export", isCollectionItem: false },
            gridSize: { optionName: "gridSize", isCollectionItem: false },
            nodes: { optionName: "nodes", isCollectionItem: false },
            pageSize: { optionName: "pageSize", isCollectionItem: false },
            propertiesPanel: { optionName: "propertiesPanel", isCollectionItem: false },
            toolbar: { optionName: "toolbar", isCollectionItem: false },
            toolbox: { optionName: "toolbox", isCollectionItem: false },
            zoomLevel: { optionName: "zoomLevel", isCollectionItem: false }
        };
        return _this;
    }
    Object.defineProperty(Diagram.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return Diagram;
}(component_1.Component));
exports.Diagram = Diagram;
Diagram.propTypes = {
    accessKey: PropTypes.string,
    activeStateEnabled: PropTypes.bool,
    autoZoom: PropTypes.oneOf([
        "fitContent",
        "fitWidth",
        "disabled"
    ]),
    contextMenu: PropTypes.object,
    customShapes: PropTypes.array,
    disabled: PropTypes.bool,
    edges: PropTypes.object,
    elementAttr: PropTypes.object,
    export: PropTypes.object,
    focusStateEnabled: PropTypes.bool,
    fullScreen: PropTypes.bool,
    gridSize: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.object
    ]),
    height: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    hint: PropTypes.string,
    hoverStateEnabled: PropTypes.bool,
    nodes: PropTypes.object,
    onContentReady: PropTypes.func,
    onDataChanged: PropTypes.func,
    onDisposing: PropTypes.func,
    onInitialized: PropTypes.func,
    onItemClick: PropTypes.func,
    onItemDblClick: PropTypes.func,
    onOptionChanged: PropTypes.func,
    onSelectionChanged: PropTypes.func,
    pageColor: PropTypes.string,
    pageOrientation: PropTypes.oneOf([
        "portrait",
        "landscape"
    ]),
    pageSize: PropTypes.object,
    propertiesPanel: PropTypes.object,
    readOnly: PropTypes.bool,
    rtlEnabled: PropTypes.bool,
    showGrid: PropTypes.bool,
    simpleView: PropTypes.bool,
    snapToGrid: PropTypes.bool,
    tabIndex: PropTypes.number,
    toolbar: PropTypes.object,
    toolbox: PropTypes.object,
    units: PropTypes.oneOf([
        "in",
        "cm",
        "px"
    ]),
    viewUnits: PropTypes.oneOf([
        "in",
        "cm",
        "px"
    ]),
    visible: PropTypes.bool,
    width: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.number,
        PropTypes.string
    ]),
    zoomLevel: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.object
    ])
};
// tslint:disable:max-classes-per-file
// owners:
// Nodes
var AutoLayout = /** @class */ (function (_super) {
    __extends(AutoLayout, _super);
    function AutoLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoLayout.OptionName = "autoLayout";
    return AutoLayout;
}(nested_option_1.default));
exports.AutoLayout = AutoLayout;
// owners:
// CustomShape
var ConnectionPoint = /** @class */ (function (_super) {
    __extends(ConnectionPoint, _super);
    function ConnectionPoint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConnectionPoint.OptionName = "connectionPoints";
    ConnectionPoint.IsCollectionItem = true;
    return ConnectionPoint;
}(nested_option_1.default));
exports.ConnectionPoint = ConnectionPoint;
// owners:
// Diagram
var ContextMenu = /** @class */ (function (_super) {
    __extends(ContextMenu, _super);
    function ContextMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextMenu.OptionName = "contextMenu";
    return ContextMenu;
}(nested_option_1.default));
exports.ContextMenu = ContextMenu;
// owners:
// Diagram
var CustomShape = /** @class */ (function (_super) {
    __extends(CustomShape, _super);
    function CustomShape() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomShape.OptionName = "customShapes";
    CustomShape.IsCollectionItem = true;
    CustomShape.ExpectedChildren = {
        connectionPoint: { optionName: "connectionPoints", isCollectionItem: true }
    };
    return CustomShape;
}(nested_option_1.default));
exports.CustomShape = CustomShape;
// owners:
// Diagram
var Edges = /** @class */ (function (_super) {
    __extends(Edges, _super);
    function Edges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Edges.OptionName = "edges";
    return Edges;
}(nested_option_1.default));
exports.Edges = Edges;
// owners:
// Diagram
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    function Export() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Export.OptionName = "export";
    return Export;
}(nested_option_1.default));
exports.Export = Export;
// owners:
// Diagram
var GridSize = /** @class */ (function (_super) {
    __extends(GridSize, _super);
    function GridSize() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridSize.OptionName = "gridSize";
    return GridSize;
}(nested_option_1.default));
exports.GridSize = GridSize;
// owners:
// PropertiesPanel
// Toolbox
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Group.OptionName = "groups";
    Group.IsCollectionItem = true;
    return Group;
}(nested_option_1.default));
exports.Group = Group;
// owners:
// PageSize
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.OptionName = "items";
    Item.IsCollectionItem = true;
    return Item;
}(nested_option_1.default));
exports.Item = Item;
// owners:
// Diagram
var Nodes = /** @class */ (function (_super) {
    __extends(Nodes, _super);
    function Nodes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Nodes.OptionName = "nodes";
    Nodes.ExpectedChildren = {
        autoLayout: { optionName: "autoLayout", isCollectionItem: false }
    };
    return Nodes;
}(nested_option_1.default));
exports.Nodes = Nodes;
// owners:
// Diagram
var PageSize = /** @class */ (function (_super) {
    __extends(PageSize, _super);
    function PageSize() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PageSize.OptionName = "pageSize";
    PageSize.ExpectedChildren = {
        item: { optionName: "items", isCollectionItem: true }
    };
    return PageSize;
}(nested_option_1.default));
exports.PageSize = PageSize;
// owners:
// Diagram
var PropertiesPanel = /** @class */ (function (_super) {
    __extends(PropertiesPanel, _super);
    function PropertiesPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertiesPanel.OptionName = "propertiesPanel";
    PropertiesPanel.ExpectedChildren = {
        group: { optionName: "groups", isCollectionItem: true },
        propertiesPanelGroup: { optionName: "groups", isCollectionItem: true }
    };
    return PropertiesPanel;
}(nested_option_1.default));
exports.PropertiesPanel = PropertiesPanel;
// owners:
// PropertiesPanel
var PropertiesPanelGroup = /** @class */ (function (_super) {
    __extends(PropertiesPanelGroup, _super);
    function PropertiesPanelGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertiesPanelGroup.OptionName = "groups";
    PropertiesPanelGroup.IsCollectionItem = true;
    return PropertiesPanelGroup;
}(nested_option_1.default));
exports.PropertiesPanelGroup = PropertiesPanelGroup;
// owners:
// Diagram
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Toolbar.OptionName = "toolbar";
    return Toolbar;
}(nested_option_1.default));
exports.Toolbar = Toolbar;
// owners:
// Diagram
var Toolbox = /** @class */ (function (_super) {
    __extends(Toolbox, _super);
    function Toolbox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Toolbox.OptionName = "toolbox";
    Toolbox.ExpectedChildren = {
        group: { optionName: "groups", isCollectionItem: true },
        toolboxGroup: { optionName: "groups", isCollectionItem: true }
    };
    return Toolbox;
}(nested_option_1.default));
exports.Toolbox = Toolbox;
// owners:
// Toolbox
var ToolboxGroup = /** @class */ (function (_super) {
    __extends(ToolboxGroup, _super);
    function ToolboxGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolboxGroup.OptionName = "groups";
    ToolboxGroup.IsCollectionItem = true;
    return ToolboxGroup;
}(nested_option_1.default));
exports.ToolboxGroup = ToolboxGroup;
// owners:
// Diagram
var ZoomLevel = /** @class */ (function (_super) {
    __extends(ZoomLevel, _super);
    function ZoomLevel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZoomLevel.OptionName = "zoomLevel";
    return ZoomLevel;
}(nested_option_1.default));
exports.ZoomLevel = ZoomLevel;
exports.default = Diagram;
