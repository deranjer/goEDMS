/*!
 * devextreme-react
 * Version: 19.2.5
 * Build date: Mon Dec 16 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxDataGrid, { IOptions } from "devextreme/ui/data_grid";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
interface IDataGridOptions extends IOptions, IHtmlOptions {
    rowRender?: (props: any) => React.ReactNode;
    rowComponent?: React.ComponentType<any>;
    rowKeyFn?: (data: any) => string;
    defaultColumns?: any;
    defaultFilterPanel?: any;
    defaultFilterValue?: any;
    defaultFocusedColumnIndex?: any;
    defaultFocusedRowIndex?: any;
    defaultFocusedRowKey?: any;
    defaultPaging?: any;
    defaultSearchPanel?: any;
    defaultSelectedRowKeys?: any;
    defaultSelectionFilter?: any;
}
declare class DataGrid extends BaseComponent<IDataGridOptions> {
    get instance(): dxDataGrid;
    protected _WidgetClass: typeof dxDataGrid;
    protected _defaults: {
        defaultColumns: string;
        defaultFilterPanel: string;
        defaultFilterValue: string;
        defaultFocusedColumnIndex: string;
        defaultFocusedRowIndex: string;
        defaultFocusedRowKey: string;
        defaultPaging: string;
        defaultSearchPanel: string;
        defaultSelectedRowKeys: string;
        defaultSelectionFilter: string;
    };
    protected _expectedChildren: {
        column: {
            optionName: string;
            isCollectionItem: boolean;
        };
        columnChooser: {
            optionName: string;
            isCollectionItem: boolean;
        };
        columnFixing: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dataGridHeaderFilter: {
            optionName: string;
            isCollectionItem: boolean;
        };
        editing: {
            optionName: string;
            isCollectionItem: boolean;
        };
        export: {
            optionName: string;
            isCollectionItem: boolean;
        };
        filterBuilder: {
            optionName: string;
            isCollectionItem: boolean;
        };
        filterBuilderPopup: {
            optionName: string;
            isCollectionItem: boolean;
        };
        filterPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        filterRow: {
            optionName: string;
            isCollectionItem: boolean;
        };
        grouping: {
            optionName: string;
            isCollectionItem: boolean;
        };
        groupPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        headerFilter: {
            optionName: string;
            isCollectionItem: boolean;
        };
        keyboardNavigation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        loadPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        masterDetail: {
            optionName: string;
            isCollectionItem: boolean;
        };
        pager: {
            optionName: string;
            isCollectionItem: boolean;
        };
        paging: {
            optionName: string;
            isCollectionItem: boolean;
        };
        remoteOperations: {
            optionName: string;
            isCollectionItem: boolean;
        };
        rowDragging: {
            optionName: string;
            isCollectionItem: boolean;
        };
        scrolling: {
            optionName: string;
            isCollectionItem: boolean;
        };
        searchPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        selection: {
            optionName: string;
            isCollectionItem: boolean;
        };
        sortByGroupSummaryInfo: {
            optionName: string;
            isCollectionItem: boolean;
        };
        sorting: {
            optionName: string;
            isCollectionItem: boolean;
        };
        stateStoring: {
            optionName: string;
            isCollectionItem: boolean;
        };
        summary: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Animation extends NestedOption<{
    hide?: any;
    show?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        hide: {
            optionName: string;
            isCollectionItem: boolean;
        };
        show: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class AsyncRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
    validationCallback?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class At extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
}
declare class BoundaryOffset extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
}
declare class Button extends NestedOption<{
    cssClass?: any;
    hint?: any;
    icon?: any;
    name?: any;
    onClick?: any;
    template?: any;
    text?: any;
    visible?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class ColCountByScreen extends NestedOption<{
    lg?: any;
    md?: any;
    sm?: any;
    xs?: any;
}> {
    static OptionName: string;
}
declare class Collision extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
}
declare class Column extends NestedOption<{
    alignment?: any;
    allowEditing?: any;
    allowExporting?: any;
    allowFiltering?: any;
    allowFixing?: any;
    allowGrouping?: any;
    allowHeaderFiltering?: any;
    allowHiding?: any;
    allowReordering?: any;
    allowResizing?: any;
    allowSearch?: any;
    allowSorting?: any;
    autoExpandGroup?: any;
    buttons?: any;
    calculateCellValue?: any;
    calculateDisplayValue?: any;
    calculateFilterExpression?: any;
    calculateGroupValue?: any;
    calculateSortValue?: any;
    caption?: any;
    cellTemplate?: any;
    columns?: any;
    cssClass?: any;
    customizeText?: any;
    dataField?: any;
    dataType?: any;
    editCellTemplate?: any;
    editorOptions?: any;
    encodeHtml?: any;
    falseText?: any;
    filterOperations?: any;
    filterType?: any;
    filterValue?: any;
    filterValues?: any;
    fixed?: any;
    fixedPosition?: any;
    format?: any;
    formItem?: any;
    groupCellTemplate?: any;
    grouped?: any;
    groupIndex?: any;
    headerCellTemplate?: any;
    headerFilter?: {
        allowSearch?: any;
        dataSource?: any;
        groupInterval?: any;
        height?: any;
        searchMode?: any;
        width?: any;
    };
    hidingPriority?: any;
    isBand?: any;
    lookup?: {
        allowClearing?: any;
        dataSource?: any;
        displayExpr?: any;
        valueExpr?: any;
    };
    minWidth?: any;
    name?: any;
    ownerBand?: any;
    renderAsync?: any;
    resized?: any;
    selectedFilterOperation?: any;
    setCellValue?: any;
    showEditorAlways?: any;
    showInColumnChooser?: any;
    showWhenGrouped?: any;
    sortIndex?: any;
    sortingMethod?: any;
    sortOrder?: any;
    trueText?: any;
    type?: any;
    validationRules?: any;
    visible?: any;
    visibleIndex?: any;
    width?: any;
    defaultFilterValue?: any;
    defaultFilterValues?: any;
    defaultGroupIndex?: any;
    defaultSelectedFilterOperation?: any;
    defaultSortIndex?: any;
    defaultSortOrder?: any;
    defaultVisible?: any;
    defaultVisibleIndex?: any;
    cellRender?: (props: any) => React.ReactNode;
    cellComponent?: React.ComponentType<any>;
    cellKeyFn?: (data: any) => string;
    editCellRender?: (props: any) => React.ReactNode;
    editCellComponent?: React.ComponentType<any>;
    editCellKeyFn?: (data: any) => string;
    groupCellRender?: (props: any) => React.ReactNode;
    groupCellComponent?: React.ComponentType<any>;
    groupCellKeyFn?: (data: any) => string;
    headerCellRender?: (props: any) => React.ReactNode;
    headerCellComponent?: React.ComponentType<any>;
    headerCellKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static DefaultsProps: {
        defaultFilterValue: string;
        defaultFilterValues: string;
        defaultGroupIndex: string;
        defaultSelectedFilterOperation: string;
        defaultSortIndex: string;
        defaultSortOrder: string;
        defaultVisible: string;
        defaultVisibleIndex: string;
    };
    static ExpectedChildren: {
        AsyncRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        button: {
            optionName: string;
            isCollectionItem: boolean;
        };
        columnHeaderFilter: {
            optionName: string;
            isCollectionItem: boolean;
        };
        columnLookup: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CompareRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CustomRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        EmailRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        formItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        headerFilter: {
            optionName: string;
            isCollectionItem: boolean;
        };
        lookup: {
            optionName: string;
            isCollectionItem: boolean;
        };
        NumericRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        PatternRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RangeRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RequiredRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        StringLengthRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        validationRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class ColumnChooser extends NestedOption<{
    allowSearch?: any;
    emptyPanelText?: any;
    enabled?: any;
    height?: any;
    mode?: any;
    searchTimeout?: any;
    title?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class ColumnFixing extends NestedOption<{
    enabled?: any;
    texts?: {
        fix?: any;
        leftPosition?: any;
        rightPosition?: any;
        unfix?: any;
    };
}> {
    static OptionName: string;
    static ExpectedChildren: {
        columnFixingTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ColumnFixingTexts extends NestedOption<{
    fix?: any;
    leftPosition?: any;
    rightPosition?: any;
    unfix?: any;
}> {
    static OptionName: string;
}
declare class ColumnHeaderFilter extends NestedOption<{
    allowSearch?: any;
    dataSource?: any;
    groupInterval?: any;
    height?: any;
    searchMode?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class ColumnLookup extends NestedOption<{
    allowClearing?: any;
    dataSource?: any;
    displayExpr?: any;
    valueExpr?: any;
}> {
    static OptionName: string;
}
declare class CompareRule extends NestedOption<{
    comparisonTarget?: any;
    comparisonType?: any;
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class CursorOffset extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
}
declare class CustomOperation extends NestedOption<{
    calculateFilterExpression?: any;
    caption?: any;
    customizeText?: any;
    dataTypes?: any;
    editorTemplate?: any;
    hasValue?: any;
    icon?: any;
    name?: any;
    editorRender?: (props: any) => React.ReactNode;
    editorComponent?: React.ComponentType<any>;
    editorKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class CustomRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    reevaluate?: any;
    type?: any;
    validationCallback?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class DataGridHeaderFilter extends NestedOption<{
    allowSearch?: any;
    height?: any;
    searchTimeout?: any;
    texts?: {
        cancel?: any;
        emptyValue?: any;
        ok?: any;
    };
    visible?: any;
    width?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        dataGridHeaderFilterTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class DataGridHeaderFilterTexts extends NestedOption<{
    cancel?: any;
    emptyValue?: any;
    ok?: any;
}> {
    static OptionName: string;
}
declare class Editing extends NestedOption<{
    allowAdding?: any;
    allowDeleting?: any;
    allowUpdating?: any;
    form?: any;
    mode?: any;
    popup?: any;
    refreshMode?: any;
    selectTextOnEditStart?: any;
    startEditAction?: any;
    texts?: {
        addRow?: any;
        cancelAllChanges?: any;
        cancelRowChanges?: any;
        confirmDeleteMessage?: any;
        confirmDeleteTitle?: any;
        deleteRow?: any;
        editRow?: any;
        saveAllChanges?: any;
        saveRowChanges?: any;
        undeleteRow?: any;
        validationCancelChanges?: any;
    };
    useIcons?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        editingTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        form: {
            optionName: string;
            isCollectionItem: boolean;
        };
        popup: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class EditingTexts extends NestedOption<{
    addRow?: any;
    cancelAllChanges?: any;
    cancelRowChanges?: any;
    confirmDeleteMessage?: any;
    confirmDeleteTitle?: any;
    deleteRow?: any;
    editRow?: any;
    saveAllChanges?: any;
    saveRowChanges?: any;
    undeleteRow?: any;
    validationCancelChanges?: any;
}> {
    static OptionName: string;
}
declare class EmailRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Export extends NestedOption<{
    allowExportSelectedData?: any;
    customizeExcelCell?: any;
    enabled?: any;
    excelFilterEnabled?: any;
    excelWrapTextEnabled?: any;
    fileName?: any;
    ignoreExcelErrors?: any;
    proxyUrl?: any;
    texts?: {
        exportAll?: any;
        exportSelectedRows?: any;
        exportTo?: any;
    };
}> {
    static OptionName: string;
    static ExpectedChildren: {
        exportTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ExportTexts extends NestedOption<{
    exportAll?: any;
    exportSelectedRows?: any;
    exportTo?: any;
}> {
    static OptionName: string;
}
declare class Field extends NestedOption<{
    calculateFilterExpression?: any;
    caption?: any;
    customizeText?: any;
    dataField?: any;
    dataType?: any;
    defaultFilterOperation?: any;
    editorOptions?: any;
    editorTemplate?: any;
    falseText?: any;
    filterOperations?: any;
    format?: any;
    lookup?: {
        allowClearing?: any;
        dataSource?: any;
        displayExpr?: any;
        valueExpr?: any;
    };
    name?: any;
    trueText?: any;
    editorRender?: (props: any) => React.ReactNode;
    editorComponent?: React.ComponentType<any>;
    editorKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        fieldLookup: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        lookup: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class FieldLookup extends NestedOption<{
    allowClearing?: any;
    dataSource?: any;
    displayExpr?: any;
    valueExpr?: any;
}> {
    static OptionName: string;
}
declare class FilterBuilder extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    allowHierarchicalFields?: any;
    bindingOptions?: any;
    customOperations?: any;
    defaultGroupOperation?: any;
    disabled?: any;
    elementAttr?: any;
    fields?: any;
    filterOperationDescriptions?: {
        between?: any;
        contains?: any;
        endsWith?: any;
        equal?: any;
        greaterThan?: any;
        greaterThanOrEqual?: any;
        isBlank?: any;
        isNotBlank?: any;
        lessThan?: any;
        lessThanOrEqual?: any;
        notContains?: any;
        notEqual?: any;
        startsWith?: any;
    };
    focusStateEnabled?: any;
    groupOperationDescriptions?: {
        and?: any;
        notAnd?: any;
        notOr?: any;
        or?: any;
    };
    groupOperations?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    maxGroupLevel?: any;
    onContentReady?: any;
    onDisposing?: any;
    onEditorPrepared?: any;
    onEditorPreparing?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    onValueChanged?: any;
    rtlEnabled?: any;
    tabIndex?: any;
    value?: any;
    visible?: any;
    width?: any;
    defaultValue?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultValue: string;
    };
    static ExpectedChildren: {
        customOperation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        field: {
            optionName: string;
            isCollectionItem: boolean;
        };
        filterOperationDescriptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
        groupOperationDescriptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class FilterBuilderPopup extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    animation?: {
        hide?: any;
        show?: any;
    };
    bindingOptions?: any;
    closeOnOutsideClick?: any;
    container?: any;
    contentTemplate?: any;
    deferRendering?: any;
    disabled?: any;
    dragEnabled?: any;
    elementAttr?: any;
    focusStateEnabled?: any;
    fullScreen?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    maxHeight?: any;
    maxWidth?: any;
    minHeight?: any;
    minWidth?: any;
    onContentReady?: any;
    onDisposing?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onHidden?: any;
    onHiding?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    onResize?: any;
    onResizeEnd?: any;
    onResizeStart?: any;
    onShowing?: any;
    onShown?: any;
    onTitleRendered?: any;
    position?: any;
    resizeEnabled?: any;
    rtlEnabled?: any;
    shading?: any;
    shadingColor?: any;
    showCloseButton?: any;
    showTitle?: any;
    tabIndex?: any;
    title?: any;
    titleTemplate?: any;
    toolbarItems?: {
        disabled?: any;
        html?: any;
        location?: any;
        options?: any;
        template?: any;
        text?: any;
        toolbar?: any;
        visible?: any;
        widget?: any;
    };
    visible?: any;
    width?: any;
    defaultHeight?: any;
    defaultPosition?: any;
    defaultVisible?: any;
    defaultWidth?: any;
    contentRender?: (props: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
    titleRender?: (props: any) => React.ReactNode;
    titleComponent?: React.ComponentType<any>;
    titleKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultHeight: string;
        defaultPosition: string;
        defaultVisible: string;
        defaultWidth: string;
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class FilterOperationDescriptions extends NestedOption<{
    between?: any;
    contains?: any;
    endsWith?: any;
    equal?: any;
    greaterThan?: any;
    greaterThanOrEqual?: any;
    isBlank?: any;
    isNotBlank?: any;
    lessThan?: any;
    lessThanOrEqual?: any;
    notContains?: any;
    notEqual?: any;
    startsWith?: any;
}> {
    static OptionName: string;
}
declare class FilterPanel extends NestedOption<{
    customizeText?: any;
    filterEnabled?: any;
    texts?: {
        clearFilter?: any;
        createFilter?: any;
        filterEnabledHint?: any;
    };
    visible?: any;
    defaultFilterEnabled?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultFilterEnabled: string;
    };
    static ExpectedChildren: {
        filterPanelTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class FilterPanelTexts extends NestedOption<{
    clearFilter?: any;
    createFilter?: any;
    filterEnabledHint?: any;
}> {
    static OptionName: string;
}
declare class FilterRow extends NestedOption<{
    applyFilter?: any;
    applyFilterText?: any;
    betweenEndText?: any;
    betweenStartText?: any;
    operationDescriptions?: {
        between?: any;
        contains?: any;
        endsWith?: any;
        equal?: any;
        greaterThan?: any;
        greaterThanOrEqual?: any;
        lessThan?: any;
        lessThanOrEqual?: any;
        notContains?: any;
        notEqual?: any;
        startsWith?: any;
    };
    resetOperationText?: any;
    showAllText?: any;
    showOperationChooser?: any;
    visible?: any;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        operationDescriptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Form extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    alignItemLabels?: any;
    alignItemLabelsInAllGroups?: any;
    bindingOptions?: any;
    colCount?: any;
    colCountByScreen?: {
        lg?: any;
        md?: any;
        sm?: any;
        xs?: any;
    };
    customizeItem?: any;
    disabled?: any;
    elementAttr?: any;
    focusStateEnabled?: any;
    formData?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    items?: any;
    labelLocation?: any;
    minColWidth?: any;
    onContentReady?: any;
    onDisposing?: any;
    onEditorEnterKey?: any;
    onFieldDataChanged?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    optionalMark?: any;
    readOnly?: any;
    requiredMark?: any;
    requiredMessage?: any;
    rtlEnabled?: any;
    screenByWidth?: any;
    scrollingEnabled?: any;
    showColonAfterLabel?: any;
    showOptionalMark?: any;
    showRequiredMark?: any;
    showValidationSummary?: any;
    tabIndex?: any;
    validationGroup?: any;
    visible?: any;
    width?: any;
    defaultFormData?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultFormData: string;
    };
    static ExpectedChildren: {
        colCountByScreen: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class Format extends NestedOption<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class FormItem extends NestedOption<{
    colSpan?: any;
    cssClass?: any;
    dataField?: any;
    editorOptions?: any;
    editorType?: any;
    helpText?: any;
    isRequired?: any;
    itemType?: any;
    label?: {
        alignment?: any;
        location?: any;
        showColon?: any;
        text?: any;
        visible?: any;
    };
    name?: any;
    template?: any;
    validationRules?: any;
    visible?: any;
    visibleIndex?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        AsyncRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CompareRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        CustomRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        EmailRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        label: {
            optionName: string;
            isCollectionItem: boolean;
        };
        NumericRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        PatternRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RangeRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        RequiredRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        StringLengthRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
        validationRule: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Grouping extends NestedOption<{
    allowCollapsing?: any;
    autoExpandAll?: any;
    contextMenuEnabled?: any;
    expandMode?: any;
    texts?: {
        groupByThisColumn?: any;
        groupContinuedMessage?: any;
        groupContinuesMessage?: any;
        ungroup?: any;
        ungroupAll?: any;
    };
}> {
    static OptionName: string;
    static ExpectedChildren: {
        groupingTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class GroupingTexts extends NestedOption<{
    groupByThisColumn?: any;
    groupContinuedMessage?: any;
    groupContinuesMessage?: any;
    ungroup?: any;
    ungroupAll?: any;
}> {
    static OptionName: string;
}
declare class GroupItem extends NestedOption<{
    alignByColumn?: any;
    column?: any;
    customizeText?: any;
    displayFormat?: any;
    name?: any;
    showInColumn?: any;
    showInGroupFooter?: any;
    skipEmptyValues?: any;
    summaryType?: any;
    valueFormat?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        valueFormat: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class GroupOperationDescriptions extends NestedOption<{
    and?: any;
    notAnd?: any;
    notOr?: any;
    or?: any;
}> {
    static OptionName: string;
}
declare class GroupPanel extends NestedOption<{
    allowColumnDragging?: any;
    emptyPanelText?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class HeaderFilter extends NestedOption<{
    allowSearch?: any;
    dataSource?: any;
    groupInterval?: any;
    height?: any;
    searchMode?: any;
    width?: any;
    searchTimeout?: any;
    texts?: {
        cancel?: any;
        emptyValue?: any;
        ok?: any;
    };
    visible?: any;
}> {
    static OptionName: string;
}
declare class Hide extends NestedOption<{
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class KeyboardNavigation extends NestedOption<{
    editOnKeyPress?: any;
    enabled?: any;
    enterKeyAction?: any;
    enterKeyDirection?: any;
}> {
    static OptionName: string;
}
declare class Label extends NestedOption<{
    alignment?: any;
    location?: any;
    showColon?: any;
    text?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class LoadPanel extends NestedOption<{
    enabled?: any;
    height?: any;
    indicatorSrc?: any;
    shading?: any;
    shadingColor?: any;
    showIndicator?: any;
    showPane?: any;
    text?: any;
    width?: any;
}> {
    static OptionName: string;
}
declare class Lookup extends NestedOption<{
    allowClearing?: any;
    dataSource?: any;
    displayExpr?: any;
    valueExpr?: any;
}> {
    static OptionName: string;
}
declare class MasterDetail extends NestedOption<{
    autoExpandAll?: any;
    enabled?: any;
    template?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class My extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
}
declare class NumericRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Offset extends NestedOption<{
    x?: any;
    y?: any;
}> {
    static OptionName: string;
}
declare class OperationDescriptions extends NestedOption<{
    between?: any;
    contains?: any;
    endsWith?: any;
    equal?: any;
    greaterThan?: any;
    greaterThanOrEqual?: any;
    lessThan?: any;
    lessThanOrEqual?: any;
    notContains?: any;
    notEqual?: any;
    startsWith?: any;
}> {
    static OptionName: string;
}
declare class Pager extends NestedOption<{
    allowedPageSizes?: any;
    infoText?: any;
    showInfo?: any;
    showNavigationButtons?: any;
    showPageSizeSelector?: any;
    visible?: any;
}> {
    static OptionName: string;
}
declare class Paging extends NestedOption<{
    enabled?: any;
    pageIndex?: any;
    pageSize?: any;
    defaultPageIndex?: any;
    defaultPageSize?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultPageIndex: string;
        defaultPageSize: string;
    };
}
declare class PatternRule extends NestedOption<{
    ignoreEmptyValue?: any;
    message?: any;
    pattern?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Popup extends NestedOption<{
    accessKey?: any;
    activeStateEnabled?: any;
    animation?: {
        hide?: any;
        show?: any;
    };
    bindingOptions?: any;
    closeOnOutsideClick?: any;
    container?: any;
    contentTemplate?: any;
    deferRendering?: any;
    disabled?: any;
    dragEnabled?: any;
    elementAttr?: any;
    focusStateEnabled?: any;
    fullScreen?: any;
    height?: any;
    hint?: any;
    hoverStateEnabled?: any;
    maxHeight?: any;
    maxWidth?: any;
    minHeight?: any;
    minWidth?: any;
    onContentReady?: any;
    onDisposing?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onHidden?: any;
    onHiding?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    onResize?: any;
    onResizeEnd?: any;
    onResizeStart?: any;
    onShowing?: any;
    onShown?: any;
    onTitleRendered?: any;
    position?: any;
    resizeEnabled?: any;
    rtlEnabled?: any;
    shading?: any;
    shadingColor?: any;
    showCloseButton?: any;
    showTitle?: any;
    tabIndex?: any;
    title?: any;
    titleTemplate?: any;
    toolbarItems?: {
        disabled?: any;
        html?: any;
        location?: any;
        options?: any;
        template?: any;
        text?: any;
        toolbar?: any;
        visible?: any;
        widget?: any;
    };
    visible?: any;
    width?: any;
    defaultHeight?: any;
    defaultPosition?: any;
    defaultVisible?: any;
    defaultWidth?: any;
    contentRender?: (props: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
    titleRender?: (props: any) => React.ReactNode;
    titleComponent?: React.ComponentType<any>;
    titleKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultHeight: string;
        defaultPosition: string;
        defaultVisible: string;
        defaultWidth: string;
    };
    static ExpectedChildren: {
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        position: {
            optionName: string;
            isCollectionItem: boolean;
        };
        toolbarItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Position extends NestedOption<{
    at?: {
        x?: any;
        y?: any;
    };
    boundary?: any;
    boundaryOffset?: {
        x?: any;
        y?: any;
    };
    collision?: {
        x?: any;
        y?: any;
    };
    my?: {
        x?: any;
        y?: any;
    };
    of?: any;
    offset?: {
        x?: any;
        y?: any;
    };
}> {
    static OptionName: string;
    static ExpectedChildren: {
        at: {
            optionName: string;
            isCollectionItem: boolean;
        };
        boundaryOffset: {
            optionName: string;
            isCollectionItem: boolean;
        };
        collision: {
            optionName: string;
            isCollectionItem: boolean;
        };
        my: {
            optionName: string;
            isCollectionItem: boolean;
        };
        offset: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class RangeRule extends NestedOption<{
    ignoreEmptyValue?: any;
    max?: any;
    message?: any;
    min?: any;
    reevaluate?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class RemoteOperations extends NestedOption<{
    filtering?: any;
    grouping?: any;
    groupPaging?: any;
    paging?: any;
    sorting?: any;
    summary?: any;
}> {
    static OptionName: string;
}
declare class RequiredRule extends NestedOption<{
    message?: any;
    trim?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class RowDragging extends NestedOption<{
    allowDropInsideItem?: any;
    allowReordering?: any;
    autoScroll?: any;
    boundary?: any;
    container?: any;
    cursorOffset?: {
        x?: any;
        y?: any;
    };
    data?: any;
    dragDirection?: any;
    dragTemplate?: any;
    dropFeedbackMode?: any;
    filter?: any;
    group?: any;
    handle?: any;
    onAdd?: any;
    onDragChange?: any;
    onDragEnd?: any;
    onDragMove?: any;
    onDragStart?: any;
    onRemove?: any;
    onReorder?: any;
    scrollSensitivity?: any;
    scrollSpeed?: any;
    showDragIcons?: any;
    dragRender?: (props: any) => React.ReactNode;
    dragComponent?: React.ComponentType<any>;
    dragKeyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static ExpectedChildren: {
        cursorOffset: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class Scrolling extends NestedOption<{
    columnRenderingMode?: any;
    mode?: any;
    preloadEnabled?: any;
    rowRenderingMode?: any;
    scrollByContent?: any;
    scrollByThumb?: any;
    showScrollbar?: any;
    useNative?: any;
}> {
    static OptionName: string;
}
declare class SearchPanel extends NestedOption<{
    highlightCaseSensitive?: any;
    highlightSearchText?: any;
    placeholder?: any;
    searchVisibleColumnsOnly?: any;
    text?: any;
    visible?: any;
    width?: any;
    defaultText?: any;
}> {
    static OptionName: string;
    static DefaultsProps: {
        defaultText: string;
    };
}
declare class Selection extends NestedOption<{
    allowSelectAll?: any;
    deferred?: any;
    maxFilterLengthInRequest?: any;
    mode?: any;
    selectAllMode?: any;
    showCheckBoxesMode?: any;
}> {
    static OptionName: string;
}
declare class Show extends NestedOption<{
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class SortByGroupSummaryInfo extends NestedOption<{
    groupColumn?: any;
    sortOrder?: any;
    summaryItem?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
}
declare class Sorting extends NestedOption<{
    ascendingText?: any;
    clearText?: any;
    descendingText?: any;
    mode?: any;
    showSortIndexes?: any;
}> {
    static OptionName: string;
}
declare class StateStoring extends NestedOption<{
    customLoad?: any;
    customSave?: any;
    enabled?: any;
    savingTimeout?: any;
    storageKey?: any;
    type?: any;
}> {
    static OptionName: string;
}
declare class StringLengthRule extends NestedOption<{
    ignoreEmptyValue?: any;
    max?: any;
    message?: any;
    min?: any;
    trim?: any;
    type?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class Summary extends NestedOption<{
    calculateCustomSummary?: any;
    groupItems?: {
        alignByColumn?: any;
        column?: any;
        customizeText?: any;
        displayFormat?: any;
        name?: any;
        showInColumn?: any;
        showInGroupFooter?: any;
        skipEmptyValues?: any;
        summaryType?: any;
        valueFormat?: any;
    };
    recalculateWhileEditing?: any;
    skipEmptyValues?: any;
    texts?: {
        avg?: any;
        avgOtherColumn?: any;
        count?: any;
        max?: any;
        maxOtherColumn?: any;
        min?: any;
        minOtherColumn?: any;
        sum?: any;
        sumOtherColumn?: any;
    };
    totalItems?: {
        alignment?: any;
        column?: any;
        cssClass?: any;
        customizeText?: any;
        displayFormat?: any;
        name?: any;
        showInColumn?: any;
        skipEmptyValues?: any;
        summaryType?: any;
        valueFormat?: any;
    };
}> {
    static OptionName: string;
    static ExpectedChildren: {
        groupItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
        summaryTexts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        texts: {
            optionName: string;
            isCollectionItem: boolean;
        };
        totalItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class SummaryTexts extends NestedOption<{
    avg?: any;
    avgOtherColumn?: any;
    count?: any;
    max?: any;
    maxOtherColumn?: any;
    min?: any;
    minOtherColumn?: any;
    sum?: any;
    sumOtherColumn?: any;
}> {
    static OptionName: string;
}
declare class Texts extends NestedOption<{
    addRow?: any;
    cancelAllChanges?: any;
    cancelRowChanges?: any;
    confirmDeleteMessage?: any;
    confirmDeleteTitle?: any;
    deleteRow?: any;
    editRow?: any;
    saveAllChanges?: any;
    saveRowChanges?: any;
    undeleteRow?: any;
    validationCancelChanges?: any;
    exportAll?: any;
    exportSelectedRows?: any;
    exportTo?: any;
    groupByThisColumn?: any;
    groupContinuedMessage?: any;
    groupContinuesMessage?: any;
    ungroup?: any;
    ungroupAll?: any;
    avg?: any;
    avgOtherColumn?: any;
    count?: any;
    max?: any;
    maxOtherColumn?: any;
    min?: any;
    minOtherColumn?: any;
    sum?: any;
    sumOtherColumn?: any;
    fix?: any;
    leftPosition?: any;
    rightPosition?: any;
    unfix?: any;
    clearFilter?: any;
    createFilter?: any;
    filterEnabledHint?: any;
    cancel?: any;
    emptyValue?: any;
    ok?: any;
}> {
    static OptionName: string;
}
declare class ToolbarItem extends NestedOption<{
    disabled?: any;
    html?: any;
    location?: any;
    options?: any;
    template?: any;
    text?: any;
    toolbar?: any;
    visible?: any;
    widget?: any;
    render?: (props: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare class TotalItem extends NestedOption<{
    alignment?: any;
    column?: any;
    cssClass?: any;
    customizeText?: any;
    displayFormat?: any;
    name?: any;
    showInColumn?: any;
    skipEmptyValues?: any;
    summaryType?: any;
    valueFormat?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static ExpectedChildren: {
        valueFormat: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare class ValidationRule extends NestedOption<{
    message?: any;
    trim?: any;
    type?: any;
    ignoreEmptyValue?: any;
    max?: any;
    min?: any;
    reevaluate?: any;
    validationCallback?: any;
    comparisonTarget?: any;
    comparisonType?: any;
    pattern?: any;
}> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static PredefinedProps: {
        type: string;
    };
}
declare class ValueFormat extends NestedOption<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
}> {
    static OptionName: string;
}
export default DataGrid;
export { DataGrid, IDataGridOptions, Animation, AsyncRule, At, BoundaryOffset, Button, ColCountByScreen, Collision, Column, ColumnChooser, ColumnFixing, ColumnFixingTexts, ColumnHeaderFilter, ColumnLookup, CompareRule, CursorOffset, CustomOperation, CustomRule, DataGridHeaderFilter, DataGridHeaderFilterTexts, Editing, EditingTexts, EmailRule, Export, ExportTexts, Field, FieldLookup, FilterBuilder, FilterBuilderPopup, FilterOperationDescriptions, FilterPanel, FilterPanelTexts, FilterRow, Form, Format, FormItem, Grouping, GroupingTexts, GroupItem, GroupOperationDescriptions, GroupPanel, HeaderFilter, Hide, KeyboardNavigation, Label, LoadPanel, Lookup, MasterDetail, My, NumericRule, Offset, OperationDescriptions, Pager, Paging, PatternRule, Popup, Position, RangeRule, RemoteOperations, RequiredRule, RowDragging, Scrolling, SearchPanel, Selection, Show, SortByGroupSummaryInfo, Sorting, StateStoring, StringLengthRule, Summary, SummaryTexts, Texts, ToolbarItem, TotalItem, ValidationRule, ValueFormat };
